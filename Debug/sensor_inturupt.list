
sensor_inturupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002bbc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08002d8c  08002d8c  00012d8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e34  08002e34  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002e34  08002e34  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002e34  08002e34  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e34  08002e34  00012e34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e38  08002e38  00012e38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002e3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c4  20000070  08002eac  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000134  08002eac  00020134  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b486  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001990  00000000  00000000  0002b526  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b48  00000000  00000000  0002ceb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a88  00000000  00000000  0002da00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000237c9  00000000  00000000  0002e488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bf44  00000000  00000000  00051c51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dde91  00000000  00000000  0005db95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013ba26  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000368c  00000000  00000000  0013ba78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08002d74 	.word	0x08002d74

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08002d74 	.word	0x08002d74

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <main>:
static void MX_ADC1_Init(void);
static void MX_TIM6_Init(void);
void Error_Handler(void);

/* Main function */
int main(void) {
 80002b0:	b580      	push	{r7, lr}
 80002b2:	af00      	add	r7, sp, #0
    /* Initialize the HAL Library */
    HAL_Init();
 80002b4:	f000 fb00 	bl	80008b8 <HAL_Init>

    /* Configure the system clock */
    SystemClock_Config();
 80002b8:	f000 f812 	bl	80002e0 <SystemClock_Config>

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 80002bc:	f000 f86a 	bl	8000394 <MX_GPIO_Init>
    MX_ADC1_Init();
 80002c0:	f000 f816 	bl	80002f0 <MX_ADC1_Init>
    MX_TIM6_Init();
 80002c4:	f000 f898 	bl	80003f8 <MX_TIM6_Init>

    /* Start ADC and Timer */
    HAL_ADC_Start_IT(&hadc1);
 80002c8:	4803      	ldr	r0, [pc, #12]	; (80002d8 <main+0x28>)
 80002ca:	f000 fbcf 	bl	8000a6c <HAL_ADC_Start_IT>
    HAL_TIM_Base_Start_IT(&htim6);
 80002ce:	4803      	ldr	r0, [pc, #12]	; (80002dc <main+0x2c>)
 80002d0:	f001 fb3c 	bl	800194c <HAL_TIM_Base_Start_IT>

    /* Infinite loop */
    while (1) {
 80002d4:	e7fe      	b.n	80002d4 <main+0x24>
 80002d6:	bf00      	nop
 80002d8:	2000008c 	.word	0x2000008c
 80002dc:	200000d4 	.word	0x200000d4

080002e0 <SystemClock_Config>:

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void) {
 80002e0:	b480      	push	{r7}
 80002e2:	af00      	add	r7, sp, #0
    // Configure system clock (use STM32CubeMX generated code or modify as needed)
}
 80002e4:	bf00      	nop
 80002e6:	46bd      	mov	sp, r7
 80002e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ec:	4770      	bx	lr
	...

080002f0 <MX_ADC1_Init>:
/**
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void) {
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b084      	sub	sp, #16
 80002f4:	af00      	add	r7, sp, #0
    ADC_ChannelConfTypeDef sConfig = {0};
 80002f6:	463b      	mov	r3, r7
 80002f8:	2200      	movs	r2, #0
 80002fa:	601a      	str	r2, [r3, #0]
 80002fc:	605a      	str	r2, [r3, #4]
 80002fe:	609a      	str	r2, [r3, #8]
 8000300:	60da      	str	r2, [r3, #12]

    /* Configure the global features of the ADC */
    hadc1.Instance = ADC1;
 8000302:	4b21      	ldr	r3, [pc, #132]	; (8000388 <MX_ADC1_Init+0x98>)
 8000304:	4a21      	ldr	r2, [pc, #132]	; (800038c <MX_ADC1_Init+0x9c>)
 8000306:	601a      	str	r2, [r3, #0]
    hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000308:	4b1f      	ldr	r3, [pc, #124]	; (8000388 <MX_ADC1_Init+0x98>)
 800030a:	2200      	movs	r2, #0
 800030c:	605a      	str	r2, [r3, #4]
    hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800030e:	4b1e      	ldr	r3, [pc, #120]	; (8000388 <MX_ADC1_Init+0x98>)
 8000310:	2200      	movs	r2, #0
 8000312:	609a      	str	r2, [r3, #8]
    hadc1.Init.ScanConvMode = DISABLE;
 8000314:	4b1c      	ldr	r3, [pc, #112]	; (8000388 <MX_ADC1_Init+0x98>)
 8000316:	2200      	movs	r2, #0
 8000318:	611a      	str	r2, [r3, #16]
    hadc1.Init.ContinuousConvMode = DISABLE; // Use single conversion mode
 800031a:	4b1b      	ldr	r3, [pc, #108]	; (8000388 <MX_ADC1_Init+0x98>)
 800031c:	2200      	movs	r2, #0
 800031e:	761a      	strb	r2, [r3, #24]
    hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000320:	4b19      	ldr	r3, [pc, #100]	; (8000388 <MX_ADC1_Init+0x98>)
 8000322:	2200      	movs	r2, #0
 8000324:	f883 2020 	strb.w	r2, [r3, #32]
    hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000328:	4b17      	ldr	r3, [pc, #92]	; (8000388 <MX_ADC1_Init+0x98>)
 800032a:	2200      	movs	r2, #0
 800032c:	62da      	str	r2, [r3, #44]	; 0x2c
    hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800032e:	4b16      	ldr	r3, [pc, #88]	; (8000388 <MX_ADC1_Init+0x98>)
 8000330:	4a17      	ldr	r2, [pc, #92]	; (8000390 <MX_ADC1_Init+0xa0>)
 8000332:	629a      	str	r2, [r3, #40]	; 0x28
    hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000334:	4b14      	ldr	r3, [pc, #80]	; (8000388 <MX_ADC1_Init+0x98>)
 8000336:	2200      	movs	r2, #0
 8000338:	60da      	str	r2, [r3, #12]
    hadc1.Init.NbrOfConversion = 1;
 800033a:	4b13      	ldr	r3, [pc, #76]	; (8000388 <MX_ADC1_Init+0x98>)
 800033c:	2201      	movs	r2, #1
 800033e:	61da      	str	r2, [r3, #28]
    hadc1.Init.DMAContinuousRequests = DISABLE;
 8000340:	4b11      	ldr	r3, [pc, #68]	; (8000388 <MX_ADC1_Init+0x98>)
 8000342:	2200      	movs	r2, #0
 8000344:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000348:	4b0f      	ldr	r3, [pc, #60]	; (8000388 <MX_ADC1_Init+0x98>)
 800034a:	2201      	movs	r2, #1
 800034c:	615a      	str	r2, [r3, #20]
    if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 800034e:	480e      	ldr	r0, [pc, #56]	; (8000388 <MX_ADC1_Init+0x98>)
 8000350:	f000 fb48 	bl	80009e4 <HAL_ADC_Init>
 8000354:	4603      	mov	r3, r0
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <MX_ADC1_Init+0x6e>
        Error_Handler();
 800035a:	f000 f8bf 	bl	80004dc <Error_Handler>
    }

    /* Configure the selected ADC regular channel */
    sConfig.Channel = ADC_CHANNEL_0;
 800035e:	2300      	movs	r3, #0
 8000360:	603b      	str	r3, [r7, #0]
    sConfig.Rank = 1;
 8000362:	2301      	movs	r3, #1
 8000364:	607b      	str	r3, [r7, #4]
    sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000366:	2301      	movs	r3, #1
 8000368:	60bb      	str	r3, [r7, #8]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800036a:	463b      	mov	r3, r7
 800036c:	4619      	mov	r1, r3
 800036e:	4806      	ldr	r0, [pc, #24]	; (8000388 <MX_ADC1_Init+0x98>)
 8000370:	f000 fd8c 	bl	8000e8c <HAL_ADC_ConfigChannel>
 8000374:	4603      	mov	r3, r0
 8000376:	2b00      	cmp	r3, #0
 8000378:	d001      	beq.n	800037e <MX_ADC1_Init+0x8e>
        Error_Handler();
 800037a:	f000 f8af 	bl	80004dc <Error_Handler>
    }
}
 800037e:	bf00      	nop
 8000380:	3710      	adds	r7, #16
 8000382:	46bd      	mov	sp, r7
 8000384:	bd80      	pop	{r7, pc}
 8000386:	bf00      	nop
 8000388:	2000008c 	.word	0x2000008c
 800038c:	40012000 	.word	0x40012000
 8000390:	0f000001 	.word	0x0f000001

08000394 <MX_GPIO_Init>:
/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void) {
 8000394:	b580      	push	{r7, lr}
 8000396:	b086      	sub	sp, #24
 8000398:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800039a:	1d3b      	adds	r3, r7, #4
 800039c:	2200      	movs	r2, #0
 800039e:	601a      	str	r2, [r3, #0]
 80003a0:	605a      	str	r2, [r3, #4]
 80003a2:	609a      	str	r2, [r3, #8]
 80003a4:	60da      	str	r2, [r3, #12]
 80003a6:	611a      	str	r2, [r3, #16]

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80003a8:	2300      	movs	r3, #0
 80003aa:	603b      	str	r3, [r7, #0]
 80003ac:	4b10      	ldr	r3, [pc, #64]	; (80003f0 <MX_GPIO_Init+0x5c>)
 80003ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003b0:	4a0f      	ldr	r2, [pc, #60]	; (80003f0 <MX_GPIO_Init+0x5c>)
 80003b2:	f043 0301 	orr.w	r3, r3, #1
 80003b6:	6313      	str	r3, [r2, #48]	; 0x30
 80003b8:	4b0d      	ldr	r3, [pc, #52]	; (80003f0 <MX_GPIO_Init+0x5c>)
 80003ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003bc:	f003 0301 	and.w	r3, r3, #1
 80003c0:	603b      	str	r3, [r7, #0]
 80003c2:	683b      	ldr	r3, [r7, #0]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80003c4:	2200      	movs	r2, #0
 80003c6:	2120      	movs	r1, #32
 80003c8:	480a      	ldr	r0, [pc, #40]	; (80003f4 <MX_GPIO_Init+0x60>)
 80003ca:	f001 fa3d 	bl	8001848 <HAL_GPIO_WritePin>

    /*Configure GPIO pin : PA5 */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80003ce:	2320      	movs	r3, #32
 80003d0:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003d2:	2301      	movs	r3, #1
 80003d4:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003d6:	2300      	movs	r3, #0
 80003d8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003da:	2300      	movs	r3, #0
 80003dc:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003de:	1d3b      	adds	r3, r7, #4
 80003e0:	4619      	mov	r1, r3
 80003e2:	4804      	ldr	r0, [pc, #16]	; (80003f4 <MX_GPIO_Init+0x60>)
 80003e4:	f001 f89c 	bl	8001520 <HAL_GPIO_Init>
}
 80003e8:	bf00      	nop
 80003ea:	3718      	adds	r7, #24
 80003ec:	46bd      	mov	sp, r7
 80003ee:	bd80      	pop	{r7, pc}
 80003f0:	40023800 	.word	0x40023800
 80003f4:	40020000 	.word	0x40020000

080003f8 <MX_TIM6_Init>:
/**
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void) {
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b082      	sub	sp, #8
 80003fc:	af00      	add	r7, sp, #0
    __HAL_RCC_TIM6_CLK_ENABLE();
 80003fe:	2300      	movs	r3, #0
 8000400:	607b      	str	r3, [r7, #4]
 8000402:	4b14      	ldr	r3, [pc, #80]	; (8000454 <MX_TIM6_Init+0x5c>)
 8000404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000406:	4a13      	ldr	r2, [pc, #76]	; (8000454 <MX_TIM6_Init+0x5c>)
 8000408:	f043 0310 	orr.w	r3, r3, #16
 800040c:	6413      	str	r3, [r2, #64]	; 0x40
 800040e:	4b11      	ldr	r3, [pc, #68]	; (8000454 <MX_TIM6_Init+0x5c>)
 8000410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000412:	f003 0310 	and.w	r3, r3, #16
 8000416:	607b      	str	r3, [r7, #4]
 8000418:	687b      	ldr	r3, [r7, #4]

    htim6.Instance = TIM6;
 800041a:	4b0f      	ldr	r3, [pc, #60]	; (8000458 <MX_TIM6_Init+0x60>)
 800041c:	4a0f      	ldr	r2, [pc, #60]	; (800045c <MX_TIM6_Init+0x64>)
 800041e:	601a      	str	r2, [r3, #0]
    htim6.Init.Prescaler = 8399; // Prescaler value for 10 kHz timer clock (assuming 84 MHz system clock)
 8000420:	4b0d      	ldr	r3, [pc, #52]	; (8000458 <MX_TIM6_Init+0x60>)
 8000422:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8000426:	605a      	str	r2, [r3, #4]
    htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000428:	4b0b      	ldr	r3, [pc, #44]	; (8000458 <MX_TIM6_Init+0x60>)
 800042a:	2200      	movs	r2, #0
 800042c:	609a      	str	r2, [r3, #8]
    htim6.Init.Period = 999; // Period value for 1 Hz interrupt (10 kHz / 10000)
 800042e:	4b0a      	ldr	r3, [pc, #40]	; (8000458 <MX_TIM6_Init+0x60>)
 8000430:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000434:	60da      	str	r2, [r3, #12]
    htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000436:	4b08      	ldr	r3, [pc, #32]	; (8000458 <MX_TIM6_Init+0x60>)
 8000438:	2200      	movs	r2, #0
 800043a:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim6) != HAL_OK) {
 800043c:	4806      	ldr	r0, [pc, #24]	; (8000458 <MX_TIM6_Init+0x60>)
 800043e:	f001 fa36 	bl	80018ae <HAL_TIM_Base_Init>
 8000442:	4603      	mov	r3, r0
 8000444:	2b00      	cmp	r3, #0
 8000446:	d001      	beq.n	800044c <MX_TIM6_Init+0x54>
        Error_Handler();
 8000448:	f000 f848 	bl	80004dc <Error_Handler>
    }
}
 800044c:	bf00      	nop
 800044e:	3708      	adds	r7, #8
 8000450:	46bd      	mov	sp, r7
 8000452:	bd80      	pop	{r7, pc}
 8000454:	40023800 	.word	0x40023800
 8000458:	200000d4 	.word	0x200000d4
 800045c:	40001000 	.word	0x40001000

08000460 <HAL_ADC_ConvCpltCallback>:
/**
  * @brief ADC Conversion complete callback
  * @param hadc: ADC handle
  * @retval None
  */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8000460:	b580      	push	{r7, lr}
 8000462:	b084      	sub	sp, #16
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC1) {
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	4a0e      	ldr	r2, [pc, #56]	; (80004a8 <HAL_ADC_ConvCpltCallback+0x48>)
 800046e:	4293      	cmp	r3, r2
 8000470:	d116      	bne.n	80004a0 <HAL_ADC_ConvCpltCallback+0x40>
        uint32_t adcValue = HAL_ADC_GetValue(hadc);
 8000472:	6878      	ldr	r0, [r7, #4]
 8000474:	f000 fce8 	bl	8000e48 <HAL_ADC_GetValue>
 8000478:	60f8      	str	r0, [r7, #12]

        /* Print the ADC value */
        printf("ADC Value: %lu\n", adcValue);
 800047a:	68f9      	ldr	r1, [r7, #12]
 800047c:	480b      	ldr	r0, [pc, #44]	; (80004ac <HAL_ADC_ConvCpltCallback+0x4c>)
 800047e:	f001 fceb 	bl	8001e58 <iprintf>
        if (adcValue > 1800) {
 8000482:	68fb      	ldr	r3, [r7, #12]
 8000484:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8000488:	d905      	bls.n	8000496 <HAL_ADC_ConvCpltCallback+0x36>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800048a:	2201      	movs	r2, #1
 800048c:	2120      	movs	r1, #32
 800048e:	4808      	ldr	r0, [pc, #32]	; (80004b0 <HAL_ADC_ConvCpltCallback+0x50>)
 8000490:	f001 f9da 	bl	8001848 <HAL_GPIO_WritePin>
        } else {
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
        }
    }
}
 8000494:	e004      	b.n	80004a0 <HAL_ADC_ConvCpltCallback+0x40>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000496:	2200      	movs	r2, #0
 8000498:	2120      	movs	r1, #32
 800049a:	4805      	ldr	r0, [pc, #20]	; (80004b0 <HAL_ADC_ConvCpltCallback+0x50>)
 800049c:	f001 f9d4 	bl	8001848 <HAL_GPIO_WritePin>
}
 80004a0:	bf00      	nop
 80004a2:	3710      	adds	r7, #16
 80004a4:	46bd      	mov	sp, r7
 80004a6:	bd80      	pop	{r7, pc}
 80004a8:	40012000 	.word	0x40012000
 80004ac:	08002d8c 	.word	0x08002d8c
 80004b0:	40020000 	.word	0x40020000

080004b4 <HAL_TIM_PeriodElapsedCallback>:
/**
  * @brief Timer Period elapsed callback
  * @param htim: Timer handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b082      	sub	sp, #8
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM6) {
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	4a04      	ldr	r2, [pc, #16]	; (80004d4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80004c2:	4293      	cmp	r3, r2
 80004c4:	d102      	bne.n	80004cc <HAL_TIM_PeriodElapsedCallback+0x18>
        /* Start ADC conversion on timer interrupt */
        HAL_ADC_Start_IT(&hadc1);
 80004c6:	4804      	ldr	r0, [pc, #16]	; (80004d8 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80004c8:	f000 fad0 	bl	8000a6c <HAL_ADC_Start_IT>
    }
}
 80004cc:	bf00      	nop
 80004ce:	3708      	adds	r7, #8
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	40001000 	.word	0x40001000
 80004d8:	2000008c 	.word	0x2000008c

080004dc <Error_Handler>:

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void) {
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN Error_Handler_Debug */
    while (1) {
        // Blink an LED to indicate an error
        HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80004e0:	2120      	movs	r1, #32
 80004e2:	4803      	ldr	r0, [pc, #12]	; (80004f0 <Error_Handler+0x14>)
 80004e4:	f001 f9c9 	bl	800187a <HAL_GPIO_TogglePin>
        HAL_Delay(100);
 80004e8:	2064      	movs	r0, #100	; 0x64
 80004ea:	f000 fa57 	bl	800099c <HAL_Delay>
        HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80004ee:	e7f7      	b.n	80004e0 <Error_Handler+0x4>
 80004f0:	40020000 	.word	0x40020000

080004f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004fa:	2300      	movs	r3, #0
 80004fc:	607b      	str	r3, [r7, #4]
 80004fe:	4b10      	ldr	r3, [pc, #64]	; (8000540 <HAL_MspInit+0x4c>)
 8000500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000502:	4a0f      	ldr	r2, [pc, #60]	; (8000540 <HAL_MspInit+0x4c>)
 8000504:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000508:	6453      	str	r3, [r2, #68]	; 0x44
 800050a:	4b0d      	ldr	r3, [pc, #52]	; (8000540 <HAL_MspInit+0x4c>)
 800050c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800050e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000512:	607b      	str	r3, [r7, #4]
 8000514:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000516:	2300      	movs	r3, #0
 8000518:	603b      	str	r3, [r7, #0]
 800051a:	4b09      	ldr	r3, [pc, #36]	; (8000540 <HAL_MspInit+0x4c>)
 800051c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800051e:	4a08      	ldr	r2, [pc, #32]	; (8000540 <HAL_MspInit+0x4c>)
 8000520:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000524:	6413      	str	r3, [r2, #64]	; 0x40
 8000526:	4b06      	ldr	r3, [pc, #24]	; (8000540 <HAL_MspInit+0x4c>)
 8000528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800052a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800052e:	603b      	str	r3, [r7, #0]
 8000530:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000532:	2007      	movs	r0, #7
 8000534:	f000 ffb2 	bl	800149c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000538:	bf00      	nop
 800053a:	3708      	adds	r7, #8
 800053c:	46bd      	mov	sp, r7
 800053e:	bd80      	pop	{r7, pc}
 8000540:	40023800 	.word	0x40023800

08000544 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b08a      	sub	sp, #40	; 0x28
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800054c:	f107 0314 	add.w	r3, r7, #20
 8000550:	2200      	movs	r2, #0
 8000552:	601a      	str	r2, [r3, #0]
 8000554:	605a      	str	r2, [r3, #4]
 8000556:	609a      	str	r2, [r3, #8]
 8000558:	60da      	str	r2, [r3, #12]
 800055a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4a1b      	ldr	r2, [pc, #108]	; (80005d0 <HAL_ADC_MspInit+0x8c>)
 8000562:	4293      	cmp	r3, r2
 8000564:	d12f      	bne.n	80005c6 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000566:	2300      	movs	r3, #0
 8000568:	613b      	str	r3, [r7, #16]
 800056a:	4b1a      	ldr	r3, [pc, #104]	; (80005d4 <HAL_ADC_MspInit+0x90>)
 800056c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800056e:	4a19      	ldr	r2, [pc, #100]	; (80005d4 <HAL_ADC_MspInit+0x90>)
 8000570:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000574:	6453      	str	r3, [r2, #68]	; 0x44
 8000576:	4b17      	ldr	r3, [pc, #92]	; (80005d4 <HAL_ADC_MspInit+0x90>)
 8000578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800057a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800057e:	613b      	str	r3, [r7, #16]
 8000580:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000582:	2300      	movs	r3, #0
 8000584:	60fb      	str	r3, [r7, #12]
 8000586:	4b13      	ldr	r3, [pc, #76]	; (80005d4 <HAL_ADC_MspInit+0x90>)
 8000588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058a:	4a12      	ldr	r2, [pc, #72]	; (80005d4 <HAL_ADC_MspInit+0x90>)
 800058c:	f043 0301 	orr.w	r3, r3, #1
 8000590:	6313      	str	r3, [r2, #48]	; 0x30
 8000592:	4b10      	ldr	r3, [pc, #64]	; (80005d4 <HAL_ADC_MspInit+0x90>)
 8000594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000596:	f003 0301 	and.w	r3, r3, #1
 800059a:	60fb      	str	r3, [r7, #12]
 800059c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800059e:	2301      	movs	r3, #1
 80005a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005a2:	2303      	movs	r3, #3
 80005a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a6:	2300      	movs	r3, #0
 80005a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005aa:	f107 0314 	add.w	r3, r7, #20
 80005ae:	4619      	mov	r1, r3
 80005b0:	4809      	ldr	r0, [pc, #36]	; (80005d8 <HAL_ADC_MspInit+0x94>)
 80005b2:	f000 ffb5 	bl	8001520 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80005b6:	2200      	movs	r2, #0
 80005b8:	2100      	movs	r1, #0
 80005ba:	2012      	movs	r0, #18
 80005bc:	f000 ff79 	bl	80014b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80005c0:	2012      	movs	r0, #18
 80005c2:	f000 ff92 	bl	80014ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80005c6:	bf00      	nop
 80005c8:	3728      	adds	r7, #40	; 0x28
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	40012000 	.word	0x40012000
 80005d4:	40023800 	.word	0x40023800
 80005d8:	40020000 	.word	0x40020000

080005dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b084      	sub	sp, #16
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4a0e      	ldr	r2, [pc, #56]	; (8000624 <HAL_TIM_Base_MspInit+0x48>)
 80005ea:	4293      	cmp	r3, r2
 80005ec:	d115      	bne.n	800061a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80005ee:	2300      	movs	r3, #0
 80005f0:	60fb      	str	r3, [r7, #12]
 80005f2:	4b0d      	ldr	r3, [pc, #52]	; (8000628 <HAL_TIM_Base_MspInit+0x4c>)
 80005f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f6:	4a0c      	ldr	r2, [pc, #48]	; (8000628 <HAL_TIM_Base_MspInit+0x4c>)
 80005f8:	f043 0310 	orr.w	r3, r3, #16
 80005fc:	6413      	str	r3, [r2, #64]	; 0x40
 80005fe:	4b0a      	ldr	r3, [pc, #40]	; (8000628 <HAL_TIM_Base_MspInit+0x4c>)
 8000600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000602:	f003 0310 	and.w	r3, r3, #16
 8000606:	60fb      	str	r3, [r7, #12]
 8000608:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800060a:	2200      	movs	r2, #0
 800060c:	2100      	movs	r1, #0
 800060e:	2036      	movs	r0, #54	; 0x36
 8000610:	f000 ff4f 	bl	80014b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000614:	2036      	movs	r0, #54	; 0x36
 8000616:	f000 ff68 	bl	80014ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800061a:	bf00      	nop
 800061c:	3710      	adds	r7, #16
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	40001000 	.word	0x40001000
 8000628:	40023800 	.word	0x40023800

0800062c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000630:	e7fe      	b.n	8000630 <NMI_Handler+0x4>

08000632 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000632:	b480      	push	{r7}
 8000634:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000636:	e7fe      	b.n	8000636 <HardFault_Handler+0x4>

08000638 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800063c:	e7fe      	b.n	800063c <MemManage_Handler+0x4>

0800063e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800063e:	b480      	push	{r7}
 8000640:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000642:	e7fe      	b.n	8000642 <BusFault_Handler+0x4>

08000644 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000648:	e7fe      	b.n	8000648 <UsageFault_Handler+0x4>

0800064a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800064a:	b480      	push	{r7}
 800064c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800064e:	bf00      	nop
 8000650:	46bd      	mov	sp, r7
 8000652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000656:	4770      	bx	lr

08000658 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800065c:	bf00      	nop
 800065e:	46bd      	mov	sp, r7
 8000660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000664:	4770      	bx	lr

08000666 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000666:	b480      	push	{r7}
 8000668:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800066a:	bf00      	nop
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr

08000674 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000678:	f000 f970 	bl	800095c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800067c:	bf00      	nop
 800067e:	bd80      	pop	{r7, pc}

08000680 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000684:	4802      	ldr	r0, [pc, #8]	; (8000690 <ADC_IRQHandler+0x10>)
 8000686:	f000 facf 	bl	8000c28 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800068a:	bf00      	nop
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	2000008c 	.word	0x2000008c

08000694 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000698:	4802      	ldr	r0, [pc, #8]	; (80006a4 <TIM6_DAC_IRQHandler+0x10>)
 800069a:	f001 f9c7 	bl	8001a2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800069e:	bf00      	nop
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	200000d4 	.word	0x200000d4

080006a8 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b083      	sub	sp, #12
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	4603      	mov	r3, r0
 80006b0:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80006b2:	4b0f      	ldr	r3, [pc, #60]	; (80006f0 <ITM_SendChar+0x48>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	4a0e      	ldr	r2, [pc, #56]	; (80006f0 <ITM_SendChar+0x48>)
 80006b8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80006bc:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80006be:	4b0d      	ldr	r3, [pc, #52]	; (80006f4 <ITM_SendChar+0x4c>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	4a0c      	ldr	r2, [pc, #48]	; (80006f4 <ITM_SendChar+0x4c>)
 80006c4:	f043 0301 	orr.w	r3, r3, #1
 80006c8:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80006ca:	bf00      	nop
 80006cc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	f003 0301 	and.w	r3, r3, #1
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d0f8      	beq.n	80006cc <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80006da:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80006de:	79fb      	ldrb	r3, [r7, #7]
 80006e0:	6013      	str	r3, [r2, #0]
}
 80006e2:	bf00      	nop
 80006e4:	370c      	adds	r7, #12
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	e000edfc 	.word	0xe000edfc
 80006f4:	e0000e00 	.word	0xe0000e00

080006f8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b086      	sub	sp, #24
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	60f8      	str	r0, [r7, #12]
 8000700:	60b9      	str	r1, [r7, #8]
 8000702:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000704:	2300      	movs	r3, #0
 8000706:	617b      	str	r3, [r7, #20]
 8000708:	e00a      	b.n	8000720 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800070a:	f3af 8000 	nop.w
 800070e:	4601      	mov	r1, r0
 8000710:	68bb      	ldr	r3, [r7, #8]
 8000712:	1c5a      	adds	r2, r3, #1
 8000714:	60ba      	str	r2, [r7, #8]
 8000716:	b2ca      	uxtb	r2, r1
 8000718:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800071a:	697b      	ldr	r3, [r7, #20]
 800071c:	3301      	adds	r3, #1
 800071e:	617b      	str	r3, [r7, #20]
 8000720:	697a      	ldr	r2, [r7, #20]
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	429a      	cmp	r2, r3
 8000726:	dbf0      	blt.n	800070a <_read+0x12>
  }

  return len;
 8000728:	687b      	ldr	r3, [r7, #4]
}
 800072a:	4618      	mov	r0, r3
 800072c:	3718      	adds	r7, #24
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}

08000732 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000732:	b580      	push	{r7, lr}
 8000734:	b086      	sub	sp, #24
 8000736:	af00      	add	r7, sp, #0
 8000738:	60f8      	str	r0, [r7, #12]
 800073a:	60b9      	str	r1, [r7, #8]
 800073c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800073e:	2300      	movs	r3, #0
 8000740:	617b      	str	r3, [r7, #20]
 8000742:	e009      	b.n	8000758 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 8000744:	68bb      	ldr	r3, [r7, #8]
 8000746:	1c5a      	adds	r2, r3, #1
 8000748:	60ba      	str	r2, [r7, #8]
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	4618      	mov	r0, r3
 800074e:	f7ff ffab 	bl	80006a8 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000752:	697b      	ldr	r3, [r7, #20]
 8000754:	3301      	adds	r3, #1
 8000756:	617b      	str	r3, [r7, #20]
 8000758:	697a      	ldr	r2, [r7, #20]
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	429a      	cmp	r2, r3
 800075e:	dbf1      	blt.n	8000744 <_write+0x12>
  }
  return len;
 8000760:	687b      	ldr	r3, [r7, #4]
}
 8000762:	4618      	mov	r0, r3
 8000764:	3718      	adds	r7, #24
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}

0800076a <_close>:

int _close(int file)
{
 800076a:	b480      	push	{r7}
 800076c:	b083      	sub	sp, #12
 800076e:	af00      	add	r7, sp, #0
 8000770:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000772:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000776:	4618      	mov	r0, r3
 8000778:	370c      	adds	r7, #12
 800077a:	46bd      	mov	sp, r7
 800077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000780:	4770      	bx	lr

08000782 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000782:	b480      	push	{r7}
 8000784:	b083      	sub	sp, #12
 8000786:	af00      	add	r7, sp, #0
 8000788:	6078      	str	r0, [r7, #4]
 800078a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800078c:	683b      	ldr	r3, [r7, #0]
 800078e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000792:	605a      	str	r2, [r3, #4]
  return 0;
 8000794:	2300      	movs	r3, #0
}
 8000796:	4618      	mov	r0, r3
 8000798:	370c      	adds	r7, #12
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr

080007a2 <_isatty>:

int _isatty(int file)
{
 80007a2:	b480      	push	{r7}
 80007a4:	b083      	sub	sp, #12
 80007a6:	af00      	add	r7, sp, #0
 80007a8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80007aa:	2301      	movs	r3, #1
}
 80007ac:	4618      	mov	r0, r3
 80007ae:	370c      	adds	r7, #12
 80007b0:	46bd      	mov	sp, r7
 80007b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b6:	4770      	bx	lr

080007b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b085      	sub	sp, #20
 80007bc:	af00      	add	r7, sp, #0
 80007be:	60f8      	str	r0, [r7, #12]
 80007c0:	60b9      	str	r1, [r7, #8]
 80007c2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80007c4:	2300      	movs	r3, #0
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	3714      	adds	r7, #20
 80007ca:	46bd      	mov	sp, r7
 80007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d0:	4770      	bx	lr
	...

080007d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b086      	sub	sp, #24
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007dc:	4a14      	ldr	r2, [pc, #80]	; (8000830 <_sbrk+0x5c>)
 80007de:	4b15      	ldr	r3, [pc, #84]	; (8000834 <_sbrk+0x60>)
 80007e0:	1ad3      	subs	r3, r2, r3
 80007e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007e4:	697b      	ldr	r3, [r7, #20]
 80007e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007e8:	4b13      	ldr	r3, [pc, #76]	; (8000838 <_sbrk+0x64>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d102      	bne.n	80007f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007f0:	4b11      	ldr	r3, [pc, #68]	; (8000838 <_sbrk+0x64>)
 80007f2:	4a12      	ldr	r2, [pc, #72]	; (800083c <_sbrk+0x68>)
 80007f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007f6:	4b10      	ldr	r3, [pc, #64]	; (8000838 <_sbrk+0x64>)
 80007f8:	681a      	ldr	r2, [r3, #0]
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	4413      	add	r3, r2
 80007fe:	693a      	ldr	r2, [r7, #16]
 8000800:	429a      	cmp	r2, r3
 8000802:	d207      	bcs.n	8000814 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000804:	f001 faf6 	bl	8001df4 <__errno>
 8000808:	4603      	mov	r3, r0
 800080a:	220c      	movs	r2, #12
 800080c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800080e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000812:	e009      	b.n	8000828 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000814:	4b08      	ldr	r3, [pc, #32]	; (8000838 <_sbrk+0x64>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800081a:	4b07      	ldr	r3, [pc, #28]	; (8000838 <_sbrk+0x64>)
 800081c:	681a      	ldr	r2, [r3, #0]
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	4413      	add	r3, r2
 8000822:	4a05      	ldr	r2, [pc, #20]	; (8000838 <_sbrk+0x64>)
 8000824:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000826:	68fb      	ldr	r3, [r7, #12]
}
 8000828:	4618      	mov	r0, r3
 800082a:	3718      	adds	r7, #24
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	20020000 	.word	0x20020000
 8000834:	00000400 	.word	0x00000400
 8000838:	2000011c 	.word	0x2000011c
 800083c:	20000138 	.word	0x20000138

08000840 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000844:	4b06      	ldr	r3, [pc, #24]	; (8000860 <SystemInit+0x20>)
 8000846:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800084a:	4a05      	ldr	r2, [pc, #20]	; (8000860 <SystemInit+0x20>)
 800084c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000850:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000854:	bf00      	nop
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr
 800085e:	bf00      	nop
 8000860:	e000ed00 	.word	0xe000ed00

08000864 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000864:	f8df d034 	ldr.w	sp, [pc, #52]	; 800089c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000868:	480d      	ldr	r0, [pc, #52]	; (80008a0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800086a:	490e      	ldr	r1, [pc, #56]	; (80008a4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800086c:	4a0e      	ldr	r2, [pc, #56]	; (80008a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800086e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000870:	e002      	b.n	8000878 <LoopCopyDataInit>

08000872 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000872:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000874:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000876:	3304      	adds	r3, #4

08000878 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000878:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800087a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800087c:	d3f9      	bcc.n	8000872 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800087e:	4a0b      	ldr	r2, [pc, #44]	; (80008ac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000880:	4c0b      	ldr	r4, [pc, #44]	; (80008b0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000882:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000884:	e001      	b.n	800088a <LoopFillZerobss>

08000886 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000886:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000888:	3204      	adds	r2, #4

0800088a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800088a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800088c:	d3fb      	bcc.n	8000886 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800088e:	f7ff ffd7 	bl	8000840 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000892:	f001 fab5 	bl	8001e00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000896:	f7ff fd0b 	bl	80002b0 <main>
  bx  lr    
 800089a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800089c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80008a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008a4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80008a8:	08002e3c 	.word	0x08002e3c
  ldr r2, =_sbss
 80008ac:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80008b0:	20000134 	.word	0x20000134

080008b4 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008b4:	e7fe      	b.n	80008b4 <CAN1_RX0_IRQHandler>
	...

080008b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80008bc:	4b0e      	ldr	r3, [pc, #56]	; (80008f8 <HAL_Init+0x40>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a0d      	ldr	r2, [pc, #52]	; (80008f8 <HAL_Init+0x40>)
 80008c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80008c8:	4b0b      	ldr	r3, [pc, #44]	; (80008f8 <HAL_Init+0x40>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a0a      	ldr	r2, [pc, #40]	; (80008f8 <HAL_Init+0x40>)
 80008ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008d4:	4b08      	ldr	r3, [pc, #32]	; (80008f8 <HAL_Init+0x40>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a07      	ldr	r2, [pc, #28]	; (80008f8 <HAL_Init+0x40>)
 80008da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008e0:	2003      	movs	r0, #3
 80008e2:	f000 fddb 	bl	800149c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008e6:	2000      	movs	r0, #0
 80008e8:	f000 f808 	bl	80008fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008ec:	f7ff fe02 	bl	80004f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008f0:	2300      	movs	r3, #0
}
 80008f2:	4618      	mov	r0, r3
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	40023c00 	.word	0x40023c00

080008fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000904:	4b12      	ldr	r3, [pc, #72]	; (8000950 <HAL_InitTick+0x54>)
 8000906:	681a      	ldr	r2, [r3, #0]
 8000908:	4b12      	ldr	r3, [pc, #72]	; (8000954 <HAL_InitTick+0x58>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	4619      	mov	r1, r3
 800090e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000912:	fbb3 f3f1 	udiv	r3, r3, r1
 8000916:	fbb2 f3f3 	udiv	r3, r2, r3
 800091a:	4618      	mov	r0, r3
 800091c:	f000 fdf3 	bl	8001506 <HAL_SYSTICK_Config>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000926:	2301      	movs	r3, #1
 8000928:	e00e      	b.n	8000948 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	2b0f      	cmp	r3, #15
 800092e:	d80a      	bhi.n	8000946 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000930:	2200      	movs	r2, #0
 8000932:	6879      	ldr	r1, [r7, #4]
 8000934:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000938:	f000 fdbb 	bl	80014b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800093c:	4a06      	ldr	r2, [pc, #24]	; (8000958 <HAL_InitTick+0x5c>)
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000942:	2300      	movs	r3, #0
 8000944:	e000      	b.n	8000948 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000946:	2301      	movs	r3, #1
}
 8000948:	4618      	mov	r0, r3
 800094a:	3708      	adds	r7, #8
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	20000000 	.word	0x20000000
 8000954:	20000008 	.word	0x20000008
 8000958:	20000004 	.word	0x20000004

0800095c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000960:	4b06      	ldr	r3, [pc, #24]	; (800097c <HAL_IncTick+0x20>)
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	461a      	mov	r2, r3
 8000966:	4b06      	ldr	r3, [pc, #24]	; (8000980 <HAL_IncTick+0x24>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	4413      	add	r3, r2
 800096c:	4a04      	ldr	r2, [pc, #16]	; (8000980 <HAL_IncTick+0x24>)
 800096e:	6013      	str	r3, [r2, #0]
}
 8000970:	bf00      	nop
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	20000008 	.word	0x20000008
 8000980:	20000120 	.word	0x20000120

08000984 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  return uwTick;
 8000988:	4b03      	ldr	r3, [pc, #12]	; (8000998 <HAL_GetTick+0x14>)
 800098a:	681b      	ldr	r3, [r3, #0]
}
 800098c:	4618      	mov	r0, r3
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	20000120 	.word	0x20000120

0800099c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b084      	sub	sp, #16
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009a4:	f7ff ffee 	bl	8000984 <HAL_GetTick>
 80009a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80009b4:	d005      	beq.n	80009c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009b6:	4b0a      	ldr	r3, [pc, #40]	; (80009e0 <HAL_Delay+0x44>)
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	461a      	mov	r2, r3
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	4413      	add	r3, r2
 80009c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80009c2:	bf00      	nop
 80009c4:	f7ff ffde 	bl	8000984 <HAL_GetTick>
 80009c8:	4602      	mov	r2, r0
 80009ca:	68bb      	ldr	r3, [r7, #8]
 80009cc:	1ad3      	subs	r3, r2, r3
 80009ce:	68fa      	ldr	r2, [r7, #12]
 80009d0:	429a      	cmp	r2, r3
 80009d2:	d8f7      	bhi.n	80009c4 <HAL_Delay+0x28>
  {
  }
}
 80009d4:	bf00      	nop
 80009d6:	bf00      	nop
 80009d8:	3710      	adds	r7, #16
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	20000008 	.word	0x20000008

080009e4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b084      	sub	sp, #16
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80009ec:	2300      	movs	r3, #0
 80009ee:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d101      	bne.n	80009fa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80009f6:	2301      	movs	r3, #1
 80009f8:	e033      	b.n	8000a62 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d109      	bne.n	8000a16 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000a02:	6878      	ldr	r0, [r7, #4]
 8000a04:	f7ff fd9e 	bl	8000544 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	2200      	movs	r2, #0
 8000a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1a:	f003 0310 	and.w	r3, r3, #16
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d118      	bne.n	8000a54 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a26:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000a2a:	f023 0302 	bic.w	r3, r3, #2
 8000a2e:	f043 0202 	orr.w	r2, r3, #2
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000a36:	6878      	ldr	r0, [r7, #4]
 8000a38:	f000 fb5a 	bl	80010f0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	2200      	movs	r2, #0
 8000a40:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a46:	f023 0303 	bic.w	r3, r3, #3
 8000a4a:	f043 0201 	orr.w	r2, r3, #1
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	641a      	str	r2, [r3, #64]	; 0x40
 8000a52:	e001      	b.n	8000a58 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000a54:	2301      	movs	r3, #1
 8000a56:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000a60:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	3710      	adds	r7, #16
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
	...

08000a6c <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b085      	sub	sp, #20
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000a74:	2300      	movs	r3, #0
 8000a76:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000a7e:	2b01      	cmp	r3, #1
 8000a80:	d101      	bne.n	8000a86 <HAL_ADC_Start_IT+0x1a>
 8000a82:	2302      	movs	r3, #2
 8000a84:	e0bd      	b.n	8000c02 <HAL_ADC_Start_IT+0x196>
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	2201      	movs	r2, #1
 8000a8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	689b      	ldr	r3, [r3, #8]
 8000a94:	f003 0301 	and.w	r3, r3, #1
 8000a98:	2b01      	cmp	r3, #1
 8000a9a:	d018      	beq.n	8000ace <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	689a      	ldr	r2, [r3, #8]
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	f042 0201 	orr.w	r2, r2, #1
 8000aaa:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000aac:	4b58      	ldr	r3, [pc, #352]	; (8000c10 <HAL_ADC_Start_IT+0x1a4>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a58      	ldr	r2, [pc, #352]	; (8000c14 <HAL_ADC_Start_IT+0x1a8>)
 8000ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ab6:	0c9a      	lsrs	r2, r3, #18
 8000ab8:	4613      	mov	r3, r2
 8000aba:	005b      	lsls	r3, r3, #1
 8000abc:	4413      	add	r3, r2
 8000abe:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000ac0:	e002      	b.n	8000ac8 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8000ac2:	68bb      	ldr	r3, [r7, #8]
 8000ac4:	3b01      	subs	r3, #1
 8000ac6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d1f9      	bne.n	8000ac2 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	689b      	ldr	r3, [r3, #8]
 8000ad4:	f003 0301 	and.w	r3, r3, #1
 8000ad8:	2b01      	cmp	r3, #1
 8000ada:	f040 8085 	bne.w	8000be8 <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000ae6:	f023 0301 	bic.w	r3, r3, #1
 8000aea:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	685b      	ldr	r3, [r3, #4]
 8000af8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d007      	beq.n	8000b10 <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b04:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000b08:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000b1c:	d106      	bne.n	8000b2c <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b22:	f023 0206 	bic.w	r2, r3, #6
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	645a      	str	r2, [r3, #68]	; 0x44
 8000b2a:	e002      	b.n	8000b32 <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	2200      	movs	r2, #0
 8000b30:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	2200      	movs	r2, #0
 8000b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000b3a:	4b37      	ldr	r3, [pc, #220]	; (8000c18 <HAL_ADC_Start_IT+0x1ac>)
 8000b3c:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000b46:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	685b      	ldr	r3, [r3, #4]
 8000b4e:	687a      	ldr	r2, [r7, #4]
 8000b50:	6812      	ldr	r2, [r2, #0]
 8000b52:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000b56:	f043 0320 	orr.w	r3, r3, #32
 8000b5a:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	685b      	ldr	r3, [r3, #4]
 8000b60:	f003 031f 	and.w	r3, r3, #31
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d12a      	bne.n	8000bbe <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a2b      	ldr	r2, [pc, #172]	; (8000c1c <HAL_ADC_Start_IT+0x1b0>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d015      	beq.n	8000b9e <HAL_ADC_Start_IT+0x132>
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	4a2a      	ldr	r2, [pc, #168]	; (8000c20 <HAL_ADC_Start_IT+0x1b4>)
 8000b78:	4293      	cmp	r3, r2
 8000b7a:	d105      	bne.n	8000b88 <HAL_ADC_Start_IT+0x11c>
 8000b7c:	4b26      	ldr	r3, [pc, #152]	; (8000c18 <HAL_ADC_Start_IT+0x1ac>)
 8000b7e:	685b      	ldr	r3, [r3, #4]
 8000b80:	f003 031f 	and.w	r3, r3, #31
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d00a      	beq.n	8000b9e <HAL_ADC_Start_IT+0x132>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a25      	ldr	r2, [pc, #148]	; (8000c24 <HAL_ADC_Start_IT+0x1b8>)
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d136      	bne.n	8000c00 <HAL_ADC_Start_IT+0x194>
 8000b92:	4b21      	ldr	r3, [pc, #132]	; (8000c18 <HAL_ADC_Start_IT+0x1ac>)
 8000b94:	685b      	ldr	r3, [r3, #4]
 8000b96:	f003 0310 	and.w	r3, r3, #16
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d130      	bne.n	8000c00 <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	689b      	ldr	r3, [r3, #8]
 8000ba4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d129      	bne.n	8000c00 <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	689a      	ldr	r2, [r3, #8]
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000bba:	609a      	str	r2, [r3, #8]
 8000bbc:	e020      	b.n	8000c00 <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4a16      	ldr	r2, [pc, #88]	; (8000c1c <HAL_ADC_Start_IT+0x1b0>)
 8000bc4:	4293      	cmp	r3, r2
 8000bc6:	d11b      	bne.n	8000c00 <HAL_ADC_Start_IT+0x194>
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	689b      	ldr	r3, [r3, #8]
 8000bce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d114      	bne.n	8000c00 <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	689a      	ldr	r2, [r3, #8]
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000be4:	609a      	str	r2, [r3, #8]
 8000be6:	e00b      	b.n	8000c00 <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bec:	f043 0210 	orr.w	r2, r3, #16
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bf8:	f043 0201 	orr.w	r2, r3, #1
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8000c00:	2300      	movs	r3, #0
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	3714      	adds	r7, #20
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	20000000 	.word	0x20000000
 8000c14:	431bde83 	.word	0x431bde83
 8000c18:	40012300 	.word	0x40012300
 8000c1c:	40012000 	.word	0x40012000
 8000c20:	40012100 	.word	0x40012100
 8000c24:	40012200 	.word	0x40012200

08000c28 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b086      	sub	sp, #24
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8000c30:	2300      	movs	r3, #0
 8000c32:	617b      	str	r3, [r7, #20]
 8000c34:	2300      	movs	r3, #0
 8000c36:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	f003 0302 	and.w	r3, r3, #2
 8000c4e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8000c50:	68bb      	ldr	r3, [r7, #8]
 8000c52:	f003 0320 	and.w	r3, r3, #32
 8000c56:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d049      	beq.n	8000cf2 <HAL_ADC_IRQHandler+0xca>
 8000c5e:	693b      	ldr	r3, [r7, #16]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d046      	beq.n	8000cf2 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c68:	f003 0310 	and.w	r3, r3, #16
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d105      	bne.n	8000c7c <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c74:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	689b      	ldr	r3, [r3, #8]
 8000c82:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d12b      	bne.n	8000ce2 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d127      	bne.n	8000ce2 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c98:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d006      	beq.n	8000cae <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	689b      	ldr	r3, [r3, #8]
 8000ca6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d119      	bne.n	8000ce2 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	685a      	ldr	r2, [r3, #4]
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	f022 0220 	bic.w	r2, r2, #32
 8000cbc:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d105      	bne.n	8000ce2 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cda:	f043 0201 	orr.w	r2, r3, #1
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000ce2:	6878      	ldr	r0, [r7, #4]
 8000ce4:	f7ff fbbc 	bl	8000460 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	f06f 0212 	mvn.w	r2, #18
 8000cf0:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	f003 0304 	and.w	r3, r3, #4
 8000cf8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8000cfa:	68bb      	ldr	r3, [r7, #8]
 8000cfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d00:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d057      	beq.n	8000db8 <HAL_ADC_IRQHandler+0x190>
 8000d08:	693b      	ldr	r3, [r7, #16]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d054      	beq.n	8000db8 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d12:	f003 0310 	and.w	r3, r3, #16
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d105      	bne.n	8000d26 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	689b      	ldr	r3, [r3, #8]
 8000d2c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d139      	bne.n	8000da8 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d3a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d006      	beq.n	8000d50 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	689b      	ldr	r3, [r3, #8]
 8000d48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d12b      	bne.n	8000da8 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d124      	bne.n	8000da8 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	689b      	ldr	r3, [r3, #8]
 8000d64:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d11d      	bne.n	8000da8 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d119      	bne.n	8000da8 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	685a      	ldr	r2, [r3, #4]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000d82:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d88:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d105      	bne.n	8000da8 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da0:	f043 0201 	orr.w	r2, r3, #1
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000da8:	6878      	ldr	r0, [r7, #4]
 8000daa:	f000 fa9d 	bl	80012e8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f06f 020c 	mvn.w	r2, #12
 8000db6:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	f003 0301 	and.w	r3, r3, #1
 8000dbe:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000dc6:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d017      	beq.n	8000dfe <HAL_ADC_IRQHandler+0x1d6>
 8000dce:	693b      	ldr	r3, [r7, #16]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d014      	beq.n	8000dfe <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f003 0301 	and.w	r3, r3, #1
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d10d      	bne.n	8000dfe <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000dee:	6878      	ldr	r0, [r7, #4]
 8000df0:	f000 f837 	bl	8000e62 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f06f 0201 	mvn.w	r2, #1
 8000dfc:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	f003 0320 	and.w	r3, r3, #32
 8000e04:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8000e06:	68bb      	ldr	r3, [r7, #8]
 8000e08:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000e0c:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d015      	beq.n	8000e40 <HAL_ADC_IRQHandler+0x218>
 8000e14:	693b      	ldr	r3, [r7, #16]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d012      	beq.n	8000e40 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e1e:	f043 0202 	orr.w	r2, r3, #2
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f06f 0220 	mvn.w	r2, #32
 8000e2e:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8000e30:	6878      	ldr	r0, [r7, #4]
 8000e32:	f000 f820 	bl	8000e76 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f06f 0220 	mvn.w	r2, #32
 8000e3e:	601a      	str	r2, [r3, #0]
  }
}
 8000e40:	bf00      	nop
 8000e42:	3718      	adds	r7, #24
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}

08000e48 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8000e48:	b480      	push	{r7}
 8000e4a:	b083      	sub	sp, #12
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	370c      	adds	r7, #12
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr

08000e62 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000e62:	b480      	push	{r7}
 8000e64:	b083      	sub	sp, #12
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8000e6a:	bf00      	nop
 8000e6c:	370c      	adds	r7, #12
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr

08000e76 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000e76:	b480      	push	{r7}
 8000e78:	b083      	sub	sp, #12
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8000e7e:	bf00      	nop
 8000e80:	370c      	adds	r7, #12
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
	...

08000e8c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b085      	sub	sp, #20
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
 8000e94:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000e96:	2300      	movs	r3, #0
 8000e98:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000ea0:	2b01      	cmp	r3, #1
 8000ea2:	d101      	bne.n	8000ea8 <HAL_ADC_ConfigChannel+0x1c>
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	e113      	b.n	80010d0 <HAL_ADC_ConfigChannel+0x244>
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2201      	movs	r2, #1
 8000eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	2b09      	cmp	r3, #9
 8000eb6:	d925      	bls.n	8000f04 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	68d9      	ldr	r1, [r3, #12]
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	b29b      	uxth	r3, r3
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	4613      	mov	r3, r2
 8000ec8:	005b      	lsls	r3, r3, #1
 8000eca:	4413      	add	r3, r2
 8000ecc:	3b1e      	subs	r3, #30
 8000ece:	2207      	movs	r2, #7
 8000ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed4:	43da      	mvns	r2, r3
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	400a      	ands	r2, r1
 8000edc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	68d9      	ldr	r1, [r3, #12]
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	689a      	ldr	r2, [r3, #8]
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	b29b      	uxth	r3, r3
 8000eee:	4618      	mov	r0, r3
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	4403      	add	r3, r0
 8000ef6:	3b1e      	subs	r3, #30
 8000ef8:	409a      	lsls	r2, r3
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	430a      	orrs	r2, r1
 8000f00:	60da      	str	r2, [r3, #12]
 8000f02:	e022      	b.n	8000f4a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	6919      	ldr	r1, [r3, #16]
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	b29b      	uxth	r3, r3
 8000f10:	461a      	mov	r2, r3
 8000f12:	4613      	mov	r3, r2
 8000f14:	005b      	lsls	r3, r3, #1
 8000f16:	4413      	add	r3, r2
 8000f18:	2207      	movs	r2, #7
 8000f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1e:	43da      	mvns	r2, r3
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	400a      	ands	r2, r1
 8000f26:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	6919      	ldr	r1, [r3, #16]
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	689a      	ldr	r2, [r3, #8]
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	b29b      	uxth	r3, r3
 8000f38:	4618      	mov	r0, r3
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	005b      	lsls	r3, r3, #1
 8000f3e:	4403      	add	r3, r0
 8000f40:	409a      	lsls	r2, r3
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	430a      	orrs	r2, r1
 8000f48:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	2b06      	cmp	r3, #6
 8000f50:	d824      	bhi.n	8000f9c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	685a      	ldr	r2, [r3, #4]
 8000f5c:	4613      	mov	r3, r2
 8000f5e:	009b      	lsls	r3, r3, #2
 8000f60:	4413      	add	r3, r2
 8000f62:	3b05      	subs	r3, #5
 8000f64:	221f      	movs	r2, #31
 8000f66:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6a:	43da      	mvns	r2, r3
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	400a      	ands	r2, r1
 8000f72:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	b29b      	uxth	r3, r3
 8000f80:	4618      	mov	r0, r3
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	685a      	ldr	r2, [r3, #4]
 8000f86:	4613      	mov	r3, r2
 8000f88:	009b      	lsls	r3, r3, #2
 8000f8a:	4413      	add	r3, r2
 8000f8c:	3b05      	subs	r3, #5
 8000f8e:	fa00 f203 	lsl.w	r2, r0, r3
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	430a      	orrs	r2, r1
 8000f98:	635a      	str	r2, [r3, #52]	; 0x34
 8000f9a:	e04c      	b.n	8001036 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	2b0c      	cmp	r3, #12
 8000fa2:	d824      	bhi.n	8000fee <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	685a      	ldr	r2, [r3, #4]
 8000fae:	4613      	mov	r3, r2
 8000fb0:	009b      	lsls	r3, r3, #2
 8000fb2:	4413      	add	r3, r2
 8000fb4:	3b23      	subs	r3, #35	; 0x23
 8000fb6:	221f      	movs	r2, #31
 8000fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbc:	43da      	mvns	r2, r3
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	400a      	ands	r2, r1
 8000fc4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	b29b      	uxth	r3, r3
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	685a      	ldr	r2, [r3, #4]
 8000fd8:	4613      	mov	r3, r2
 8000fda:	009b      	lsls	r3, r3, #2
 8000fdc:	4413      	add	r3, r2
 8000fde:	3b23      	subs	r3, #35	; 0x23
 8000fe0:	fa00 f203 	lsl.w	r2, r0, r3
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	430a      	orrs	r2, r1
 8000fea:	631a      	str	r2, [r3, #48]	; 0x30
 8000fec:	e023      	b.n	8001036 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685a      	ldr	r2, [r3, #4]
 8000ff8:	4613      	mov	r3, r2
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	4413      	add	r3, r2
 8000ffe:	3b41      	subs	r3, #65	; 0x41
 8001000:	221f      	movs	r2, #31
 8001002:	fa02 f303 	lsl.w	r3, r2, r3
 8001006:	43da      	mvns	r2, r3
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	400a      	ands	r2, r1
 800100e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	b29b      	uxth	r3, r3
 800101c:	4618      	mov	r0, r3
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	685a      	ldr	r2, [r3, #4]
 8001022:	4613      	mov	r3, r2
 8001024:	009b      	lsls	r3, r3, #2
 8001026:	4413      	add	r3, r2
 8001028:	3b41      	subs	r3, #65	; 0x41
 800102a:	fa00 f203 	lsl.w	r2, r0, r3
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	430a      	orrs	r2, r1
 8001034:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001036:	4b29      	ldr	r3, [pc, #164]	; (80010dc <HAL_ADC_ConfigChannel+0x250>)
 8001038:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4a28      	ldr	r2, [pc, #160]	; (80010e0 <HAL_ADC_ConfigChannel+0x254>)
 8001040:	4293      	cmp	r3, r2
 8001042:	d10f      	bne.n	8001064 <HAL_ADC_ConfigChannel+0x1d8>
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	2b12      	cmp	r3, #18
 800104a:	d10b      	bne.n	8001064 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a1d      	ldr	r2, [pc, #116]	; (80010e0 <HAL_ADC_ConfigChannel+0x254>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d12b      	bne.n	80010c6 <HAL_ADC_ConfigChannel+0x23a>
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4a1c      	ldr	r2, [pc, #112]	; (80010e4 <HAL_ADC_ConfigChannel+0x258>)
 8001074:	4293      	cmp	r3, r2
 8001076:	d003      	beq.n	8001080 <HAL_ADC_ConfigChannel+0x1f4>
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	2b11      	cmp	r3, #17
 800107e:	d122      	bne.n	80010c6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a11      	ldr	r2, [pc, #68]	; (80010e4 <HAL_ADC_ConfigChannel+0x258>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d111      	bne.n	80010c6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80010a2:	4b11      	ldr	r3, [pc, #68]	; (80010e8 <HAL_ADC_ConfigChannel+0x25c>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4a11      	ldr	r2, [pc, #68]	; (80010ec <HAL_ADC_ConfigChannel+0x260>)
 80010a8:	fba2 2303 	umull	r2, r3, r2, r3
 80010ac:	0c9a      	lsrs	r2, r3, #18
 80010ae:	4613      	mov	r3, r2
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	4413      	add	r3, r2
 80010b4:	005b      	lsls	r3, r3, #1
 80010b6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80010b8:	e002      	b.n	80010c0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80010ba:	68bb      	ldr	r3, [r7, #8]
 80010bc:	3b01      	subs	r3, #1
 80010be:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d1f9      	bne.n	80010ba <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2200      	movs	r2, #0
 80010ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80010ce:	2300      	movs	r3, #0
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3714      	adds	r7, #20
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr
 80010dc:	40012300 	.word	0x40012300
 80010e0:	40012000 	.word	0x40012000
 80010e4:	10000012 	.word	0x10000012
 80010e8:	20000000 	.word	0x20000000
 80010ec:	431bde83 	.word	0x431bde83

080010f0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b085      	sub	sp, #20
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80010f8:	4b79      	ldr	r3, [pc, #484]	; (80012e0 <ADC_Init+0x1f0>)
 80010fa:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	685a      	ldr	r2, [r3, #4]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	431a      	orrs	r2, r3
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	685a      	ldr	r2, [r3, #4]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001124:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	6859      	ldr	r1, [r3, #4]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	691b      	ldr	r3, [r3, #16]
 8001130:	021a      	lsls	r2, r3, #8
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	430a      	orrs	r2, r1
 8001138:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	685a      	ldr	r2, [r3, #4]
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001148:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	6859      	ldr	r1, [r3, #4]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	689a      	ldr	r2, [r3, #8]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	430a      	orrs	r2, r1
 800115a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	689a      	ldr	r2, [r3, #8]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800116a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	6899      	ldr	r1, [r3, #8]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	68da      	ldr	r2, [r3, #12]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	430a      	orrs	r2, r1
 800117c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001182:	4a58      	ldr	r2, [pc, #352]	; (80012e4 <ADC_Init+0x1f4>)
 8001184:	4293      	cmp	r3, r2
 8001186:	d022      	beq.n	80011ce <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	689a      	ldr	r2, [r3, #8]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001196:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	6899      	ldr	r1, [r3, #8]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	430a      	orrs	r2, r1
 80011a8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	689a      	ldr	r2, [r3, #8]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80011b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	6899      	ldr	r1, [r3, #8]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	430a      	orrs	r2, r1
 80011ca:	609a      	str	r2, [r3, #8]
 80011cc:	e00f      	b.n	80011ee <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	689a      	ldr	r2, [r3, #8]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80011dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	689a      	ldr	r2, [r3, #8]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80011ec:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	689a      	ldr	r2, [r3, #8]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f022 0202 	bic.w	r2, r2, #2
 80011fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	6899      	ldr	r1, [r3, #8]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	7e1b      	ldrb	r3, [r3, #24]
 8001208:	005a      	lsls	r2, r3, #1
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	430a      	orrs	r2, r1
 8001210:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d01b      	beq.n	8001254 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	685a      	ldr	r2, [r3, #4]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800122a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	685a      	ldr	r2, [r3, #4]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800123a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	6859      	ldr	r1, [r3, #4]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001246:	3b01      	subs	r3, #1
 8001248:	035a      	lsls	r2, r3, #13
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	430a      	orrs	r2, r1
 8001250:	605a      	str	r2, [r3, #4]
 8001252:	e007      	b.n	8001264 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	685a      	ldr	r2, [r3, #4]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001262:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001272:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	69db      	ldr	r3, [r3, #28]
 800127e:	3b01      	subs	r3, #1
 8001280:	051a      	lsls	r2, r3, #20
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	430a      	orrs	r2, r1
 8001288:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	689a      	ldr	r2, [r3, #8]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001298:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	6899      	ldr	r1, [r3, #8]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80012a6:	025a      	lsls	r2, r3, #9
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	430a      	orrs	r2, r1
 80012ae:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	689a      	ldr	r2, [r3, #8]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80012be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	6899      	ldr	r1, [r3, #8]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	695b      	ldr	r3, [r3, #20]
 80012ca:	029a      	lsls	r2, r3, #10
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	430a      	orrs	r2, r1
 80012d2:	609a      	str	r2, [r3, #8]
}
 80012d4:	bf00      	nop
 80012d6:	3714      	adds	r7, #20
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr
 80012e0:	40012300 	.word	0x40012300
 80012e4:	0f000001 	.word	0x0f000001

080012e8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80012f0:	bf00      	nop
 80012f2:	370c      	adds	r7, #12
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr

080012fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b085      	sub	sp, #20
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	f003 0307 	and.w	r3, r3, #7
 800130a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800130c:	4b0c      	ldr	r3, [pc, #48]	; (8001340 <__NVIC_SetPriorityGrouping+0x44>)
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001312:	68ba      	ldr	r2, [r7, #8]
 8001314:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001318:	4013      	ands	r3, r2
 800131a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001324:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001328:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800132c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800132e:	4a04      	ldr	r2, [pc, #16]	; (8001340 <__NVIC_SetPriorityGrouping+0x44>)
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	60d3      	str	r3, [r2, #12]
}
 8001334:	bf00      	nop
 8001336:	3714      	adds	r7, #20
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr
 8001340:	e000ed00 	.word	0xe000ed00

08001344 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001348:	4b04      	ldr	r3, [pc, #16]	; (800135c <__NVIC_GetPriorityGrouping+0x18>)
 800134a:	68db      	ldr	r3, [r3, #12]
 800134c:	0a1b      	lsrs	r3, r3, #8
 800134e:	f003 0307 	and.w	r3, r3, #7
}
 8001352:	4618      	mov	r0, r3
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr
 800135c:	e000ed00 	.word	0xe000ed00

08001360 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	4603      	mov	r3, r0
 8001368:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800136a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136e:	2b00      	cmp	r3, #0
 8001370:	db0b      	blt.n	800138a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001372:	79fb      	ldrb	r3, [r7, #7]
 8001374:	f003 021f 	and.w	r2, r3, #31
 8001378:	4907      	ldr	r1, [pc, #28]	; (8001398 <__NVIC_EnableIRQ+0x38>)
 800137a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137e:	095b      	lsrs	r3, r3, #5
 8001380:	2001      	movs	r0, #1
 8001382:	fa00 f202 	lsl.w	r2, r0, r2
 8001386:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800138a:	bf00      	nop
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	e000e100 	.word	0xe000e100

0800139c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	4603      	mov	r3, r0
 80013a4:	6039      	str	r1, [r7, #0]
 80013a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	db0a      	blt.n	80013c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	b2da      	uxtb	r2, r3
 80013b4:	490c      	ldr	r1, [pc, #48]	; (80013e8 <__NVIC_SetPriority+0x4c>)
 80013b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ba:	0112      	lsls	r2, r2, #4
 80013bc:	b2d2      	uxtb	r2, r2
 80013be:	440b      	add	r3, r1
 80013c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013c4:	e00a      	b.n	80013dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	b2da      	uxtb	r2, r3
 80013ca:	4908      	ldr	r1, [pc, #32]	; (80013ec <__NVIC_SetPriority+0x50>)
 80013cc:	79fb      	ldrb	r3, [r7, #7]
 80013ce:	f003 030f 	and.w	r3, r3, #15
 80013d2:	3b04      	subs	r3, #4
 80013d4:	0112      	lsls	r2, r2, #4
 80013d6:	b2d2      	uxtb	r2, r2
 80013d8:	440b      	add	r3, r1
 80013da:	761a      	strb	r2, [r3, #24]
}
 80013dc:	bf00      	nop
 80013de:	370c      	adds	r7, #12
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr
 80013e8:	e000e100 	.word	0xe000e100
 80013ec:	e000ed00 	.word	0xe000ed00

080013f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b089      	sub	sp, #36	; 0x24
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	60f8      	str	r0, [r7, #12]
 80013f8:	60b9      	str	r1, [r7, #8]
 80013fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	f003 0307 	and.w	r3, r3, #7
 8001402:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	f1c3 0307 	rsb	r3, r3, #7
 800140a:	2b04      	cmp	r3, #4
 800140c:	bf28      	it	cs
 800140e:	2304      	movcs	r3, #4
 8001410:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	3304      	adds	r3, #4
 8001416:	2b06      	cmp	r3, #6
 8001418:	d902      	bls.n	8001420 <NVIC_EncodePriority+0x30>
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	3b03      	subs	r3, #3
 800141e:	e000      	b.n	8001422 <NVIC_EncodePriority+0x32>
 8001420:	2300      	movs	r3, #0
 8001422:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001424:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001428:	69bb      	ldr	r3, [r7, #24]
 800142a:	fa02 f303 	lsl.w	r3, r2, r3
 800142e:	43da      	mvns	r2, r3
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	401a      	ands	r2, r3
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001438:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	fa01 f303 	lsl.w	r3, r1, r3
 8001442:	43d9      	mvns	r1, r3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001448:	4313      	orrs	r3, r2
         );
}
 800144a:	4618      	mov	r0, r3
 800144c:	3724      	adds	r7, #36	; 0x24
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
	...

08001458 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	3b01      	subs	r3, #1
 8001464:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001468:	d301      	bcc.n	800146e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800146a:	2301      	movs	r3, #1
 800146c:	e00f      	b.n	800148e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800146e:	4a0a      	ldr	r2, [pc, #40]	; (8001498 <SysTick_Config+0x40>)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	3b01      	subs	r3, #1
 8001474:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001476:	210f      	movs	r1, #15
 8001478:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800147c:	f7ff ff8e 	bl	800139c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001480:	4b05      	ldr	r3, [pc, #20]	; (8001498 <SysTick_Config+0x40>)
 8001482:	2200      	movs	r2, #0
 8001484:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001486:	4b04      	ldr	r3, [pc, #16]	; (8001498 <SysTick_Config+0x40>)
 8001488:	2207      	movs	r2, #7
 800148a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800148c:	2300      	movs	r3, #0
}
 800148e:	4618      	mov	r0, r3
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	e000e010 	.word	0xe000e010

0800149c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014a4:	6878      	ldr	r0, [r7, #4]
 80014a6:	f7ff ff29 	bl	80012fc <__NVIC_SetPriorityGrouping>
}
 80014aa:	bf00      	nop
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}

080014b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014b2:	b580      	push	{r7, lr}
 80014b4:	b086      	sub	sp, #24
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	4603      	mov	r3, r0
 80014ba:	60b9      	str	r1, [r7, #8]
 80014bc:	607a      	str	r2, [r7, #4]
 80014be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014c0:	2300      	movs	r3, #0
 80014c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014c4:	f7ff ff3e 	bl	8001344 <__NVIC_GetPriorityGrouping>
 80014c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014ca:	687a      	ldr	r2, [r7, #4]
 80014cc:	68b9      	ldr	r1, [r7, #8]
 80014ce:	6978      	ldr	r0, [r7, #20]
 80014d0:	f7ff ff8e 	bl	80013f0 <NVIC_EncodePriority>
 80014d4:	4602      	mov	r2, r0
 80014d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014da:	4611      	mov	r1, r2
 80014dc:	4618      	mov	r0, r3
 80014de:	f7ff ff5d 	bl	800139c <__NVIC_SetPriority>
}
 80014e2:	bf00      	nop
 80014e4:	3718      	adds	r7, #24
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}

080014ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014ea:	b580      	push	{r7, lr}
 80014ec:	b082      	sub	sp, #8
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	4603      	mov	r3, r0
 80014f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff ff31 	bl	8001360 <__NVIC_EnableIRQ>
}
 80014fe:	bf00      	nop
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}

08001506 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001506:	b580      	push	{r7, lr}
 8001508:	b082      	sub	sp, #8
 800150a:	af00      	add	r7, sp, #0
 800150c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	f7ff ffa2 	bl	8001458 <SysTick_Config>
 8001514:	4603      	mov	r3, r0
}
 8001516:	4618      	mov	r0, r3
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
	...

08001520 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001520:	b480      	push	{r7}
 8001522:	b089      	sub	sp, #36	; 0x24
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800152a:	2300      	movs	r3, #0
 800152c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800152e:	2300      	movs	r3, #0
 8001530:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001532:	2300      	movs	r3, #0
 8001534:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001536:	2300      	movs	r3, #0
 8001538:	61fb      	str	r3, [r7, #28]
 800153a:	e165      	b.n	8001808 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800153c:	2201      	movs	r2, #1
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	fa02 f303 	lsl.w	r3, r2, r3
 8001544:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	697a      	ldr	r2, [r7, #20]
 800154c:	4013      	ands	r3, r2
 800154e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001550:	693a      	ldr	r2, [r7, #16]
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	429a      	cmp	r2, r3
 8001556:	f040 8154 	bne.w	8001802 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	f003 0303 	and.w	r3, r3, #3
 8001562:	2b01      	cmp	r3, #1
 8001564:	d005      	beq.n	8001572 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800156e:	2b02      	cmp	r3, #2
 8001570:	d130      	bne.n	80015d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001578:	69fb      	ldr	r3, [r7, #28]
 800157a:	005b      	lsls	r3, r3, #1
 800157c:	2203      	movs	r2, #3
 800157e:	fa02 f303 	lsl.w	r3, r2, r3
 8001582:	43db      	mvns	r3, r3
 8001584:	69ba      	ldr	r2, [r7, #24]
 8001586:	4013      	ands	r3, r2
 8001588:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	68da      	ldr	r2, [r3, #12]
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	005b      	lsls	r3, r3, #1
 8001592:	fa02 f303 	lsl.w	r3, r2, r3
 8001596:	69ba      	ldr	r2, [r7, #24]
 8001598:	4313      	orrs	r3, r2
 800159a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	69ba      	ldr	r2, [r7, #24]
 80015a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015a8:	2201      	movs	r2, #1
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	fa02 f303 	lsl.w	r3, r2, r3
 80015b0:	43db      	mvns	r3, r3
 80015b2:	69ba      	ldr	r2, [r7, #24]
 80015b4:	4013      	ands	r3, r2
 80015b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	091b      	lsrs	r3, r3, #4
 80015be:	f003 0201 	and.w	r2, r3, #1
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	fa02 f303 	lsl.w	r3, r2, r3
 80015c8:	69ba      	ldr	r2, [r7, #24]
 80015ca:	4313      	orrs	r3, r2
 80015cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	69ba      	ldr	r2, [r7, #24]
 80015d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f003 0303 	and.w	r3, r3, #3
 80015dc:	2b03      	cmp	r3, #3
 80015de:	d017      	beq.n	8001610 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	005b      	lsls	r3, r3, #1
 80015ea:	2203      	movs	r2, #3
 80015ec:	fa02 f303 	lsl.w	r3, r2, r3
 80015f0:	43db      	mvns	r3, r3
 80015f2:	69ba      	ldr	r2, [r7, #24]
 80015f4:	4013      	ands	r3, r2
 80015f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	689a      	ldr	r2, [r3, #8]
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	005b      	lsls	r3, r3, #1
 8001600:	fa02 f303 	lsl.w	r3, r2, r3
 8001604:	69ba      	ldr	r2, [r7, #24]
 8001606:	4313      	orrs	r3, r2
 8001608:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	69ba      	ldr	r2, [r7, #24]
 800160e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f003 0303 	and.w	r3, r3, #3
 8001618:	2b02      	cmp	r3, #2
 800161a:	d123      	bne.n	8001664 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800161c:	69fb      	ldr	r3, [r7, #28]
 800161e:	08da      	lsrs	r2, r3, #3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	3208      	adds	r2, #8
 8001624:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001628:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	f003 0307 	and.w	r3, r3, #7
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	220f      	movs	r2, #15
 8001634:	fa02 f303 	lsl.w	r3, r2, r3
 8001638:	43db      	mvns	r3, r3
 800163a:	69ba      	ldr	r2, [r7, #24]
 800163c:	4013      	ands	r3, r2
 800163e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	691a      	ldr	r2, [r3, #16]
 8001644:	69fb      	ldr	r3, [r7, #28]
 8001646:	f003 0307 	and.w	r3, r3, #7
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	fa02 f303 	lsl.w	r3, r2, r3
 8001650:	69ba      	ldr	r2, [r7, #24]
 8001652:	4313      	orrs	r3, r2
 8001654:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	08da      	lsrs	r2, r3, #3
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	3208      	adds	r2, #8
 800165e:	69b9      	ldr	r1, [r7, #24]
 8001660:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	005b      	lsls	r3, r3, #1
 800166e:	2203      	movs	r2, #3
 8001670:	fa02 f303 	lsl.w	r3, r2, r3
 8001674:	43db      	mvns	r3, r3
 8001676:	69ba      	ldr	r2, [r7, #24]
 8001678:	4013      	ands	r3, r2
 800167a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f003 0203 	and.w	r2, r3, #3
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	005b      	lsls	r3, r3, #1
 8001688:	fa02 f303 	lsl.w	r3, r2, r3
 800168c:	69ba      	ldr	r2, [r7, #24]
 800168e:	4313      	orrs	r3, r2
 8001690:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	69ba      	ldr	r2, [r7, #24]
 8001696:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	f000 80ae 	beq.w	8001802 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016a6:	2300      	movs	r3, #0
 80016a8:	60fb      	str	r3, [r7, #12]
 80016aa:	4b5d      	ldr	r3, [pc, #372]	; (8001820 <HAL_GPIO_Init+0x300>)
 80016ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ae:	4a5c      	ldr	r2, [pc, #368]	; (8001820 <HAL_GPIO_Init+0x300>)
 80016b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016b4:	6453      	str	r3, [r2, #68]	; 0x44
 80016b6:	4b5a      	ldr	r3, [pc, #360]	; (8001820 <HAL_GPIO_Init+0x300>)
 80016b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016be:	60fb      	str	r3, [r7, #12]
 80016c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016c2:	4a58      	ldr	r2, [pc, #352]	; (8001824 <HAL_GPIO_Init+0x304>)
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	089b      	lsrs	r3, r3, #2
 80016c8:	3302      	adds	r3, #2
 80016ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016d0:	69fb      	ldr	r3, [r7, #28]
 80016d2:	f003 0303 	and.w	r3, r3, #3
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	220f      	movs	r2, #15
 80016da:	fa02 f303 	lsl.w	r3, r2, r3
 80016de:	43db      	mvns	r3, r3
 80016e0:	69ba      	ldr	r2, [r7, #24]
 80016e2:	4013      	ands	r3, r2
 80016e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4a4f      	ldr	r2, [pc, #316]	; (8001828 <HAL_GPIO_Init+0x308>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d025      	beq.n	800173a <HAL_GPIO_Init+0x21a>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4a4e      	ldr	r2, [pc, #312]	; (800182c <HAL_GPIO_Init+0x30c>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d01f      	beq.n	8001736 <HAL_GPIO_Init+0x216>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4a4d      	ldr	r2, [pc, #308]	; (8001830 <HAL_GPIO_Init+0x310>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d019      	beq.n	8001732 <HAL_GPIO_Init+0x212>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4a4c      	ldr	r2, [pc, #304]	; (8001834 <HAL_GPIO_Init+0x314>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d013      	beq.n	800172e <HAL_GPIO_Init+0x20e>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4a4b      	ldr	r2, [pc, #300]	; (8001838 <HAL_GPIO_Init+0x318>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d00d      	beq.n	800172a <HAL_GPIO_Init+0x20a>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4a4a      	ldr	r2, [pc, #296]	; (800183c <HAL_GPIO_Init+0x31c>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d007      	beq.n	8001726 <HAL_GPIO_Init+0x206>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4a49      	ldr	r2, [pc, #292]	; (8001840 <HAL_GPIO_Init+0x320>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d101      	bne.n	8001722 <HAL_GPIO_Init+0x202>
 800171e:	2306      	movs	r3, #6
 8001720:	e00c      	b.n	800173c <HAL_GPIO_Init+0x21c>
 8001722:	2307      	movs	r3, #7
 8001724:	e00a      	b.n	800173c <HAL_GPIO_Init+0x21c>
 8001726:	2305      	movs	r3, #5
 8001728:	e008      	b.n	800173c <HAL_GPIO_Init+0x21c>
 800172a:	2304      	movs	r3, #4
 800172c:	e006      	b.n	800173c <HAL_GPIO_Init+0x21c>
 800172e:	2303      	movs	r3, #3
 8001730:	e004      	b.n	800173c <HAL_GPIO_Init+0x21c>
 8001732:	2302      	movs	r3, #2
 8001734:	e002      	b.n	800173c <HAL_GPIO_Init+0x21c>
 8001736:	2301      	movs	r3, #1
 8001738:	e000      	b.n	800173c <HAL_GPIO_Init+0x21c>
 800173a:	2300      	movs	r3, #0
 800173c:	69fa      	ldr	r2, [r7, #28]
 800173e:	f002 0203 	and.w	r2, r2, #3
 8001742:	0092      	lsls	r2, r2, #2
 8001744:	4093      	lsls	r3, r2
 8001746:	69ba      	ldr	r2, [r7, #24]
 8001748:	4313      	orrs	r3, r2
 800174a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800174c:	4935      	ldr	r1, [pc, #212]	; (8001824 <HAL_GPIO_Init+0x304>)
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	089b      	lsrs	r3, r3, #2
 8001752:	3302      	adds	r3, #2
 8001754:	69ba      	ldr	r2, [r7, #24]
 8001756:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800175a:	4b3a      	ldr	r3, [pc, #232]	; (8001844 <HAL_GPIO_Init+0x324>)
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	43db      	mvns	r3, r3
 8001764:	69ba      	ldr	r2, [r7, #24]
 8001766:	4013      	ands	r3, r2
 8001768:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001772:	2b00      	cmp	r3, #0
 8001774:	d003      	beq.n	800177e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001776:	69ba      	ldr	r2, [r7, #24]
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	4313      	orrs	r3, r2
 800177c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800177e:	4a31      	ldr	r2, [pc, #196]	; (8001844 <HAL_GPIO_Init+0x324>)
 8001780:	69bb      	ldr	r3, [r7, #24]
 8001782:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001784:	4b2f      	ldr	r3, [pc, #188]	; (8001844 <HAL_GPIO_Init+0x324>)
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	43db      	mvns	r3, r3
 800178e:	69ba      	ldr	r2, [r7, #24]
 8001790:	4013      	ands	r3, r2
 8001792:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800179c:	2b00      	cmp	r3, #0
 800179e:	d003      	beq.n	80017a8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80017a0:	69ba      	ldr	r2, [r7, #24]
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	4313      	orrs	r3, r2
 80017a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017a8:	4a26      	ldr	r2, [pc, #152]	; (8001844 <HAL_GPIO_Init+0x324>)
 80017aa:	69bb      	ldr	r3, [r7, #24]
 80017ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80017ae:	4b25      	ldr	r3, [pc, #148]	; (8001844 <HAL_GPIO_Init+0x324>)
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	43db      	mvns	r3, r3
 80017b8:	69ba      	ldr	r2, [r7, #24]
 80017ba:	4013      	ands	r3, r2
 80017bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d003      	beq.n	80017d2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80017ca:	69ba      	ldr	r2, [r7, #24]
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	4313      	orrs	r3, r2
 80017d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017d2:	4a1c      	ldr	r2, [pc, #112]	; (8001844 <HAL_GPIO_Init+0x324>)
 80017d4:	69bb      	ldr	r3, [r7, #24]
 80017d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017d8:	4b1a      	ldr	r3, [pc, #104]	; (8001844 <HAL_GPIO_Init+0x324>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	43db      	mvns	r3, r3
 80017e2:	69ba      	ldr	r2, [r7, #24]
 80017e4:	4013      	ands	r3, r2
 80017e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d003      	beq.n	80017fc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80017f4:	69ba      	ldr	r2, [r7, #24]
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	4313      	orrs	r3, r2
 80017fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017fc:	4a11      	ldr	r2, [pc, #68]	; (8001844 <HAL_GPIO_Init+0x324>)
 80017fe:	69bb      	ldr	r3, [r7, #24]
 8001800:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	3301      	adds	r3, #1
 8001806:	61fb      	str	r3, [r7, #28]
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	2b0f      	cmp	r3, #15
 800180c:	f67f ae96 	bls.w	800153c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001810:	bf00      	nop
 8001812:	bf00      	nop
 8001814:	3724      	adds	r7, #36	; 0x24
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	40023800 	.word	0x40023800
 8001824:	40013800 	.word	0x40013800
 8001828:	40020000 	.word	0x40020000
 800182c:	40020400 	.word	0x40020400
 8001830:	40020800 	.word	0x40020800
 8001834:	40020c00 	.word	0x40020c00
 8001838:	40021000 	.word	0x40021000
 800183c:	40021400 	.word	0x40021400
 8001840:	40021800 	.word	0x40021800
 8001844:	40013c00 	.word	0x40013c00

08001848 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	460b      	mov	r3, r1
 8001852:	807b      	strh	r3, [r7, #2]
 8001854:	4613      	mov	r3, r2
 8001856:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001858:	787b      	ldrb	r3, [r7, #1]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d003      	beq.n	8001866 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800185e:	887a      	ldrh	r2, [r7, #2]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001864:	e003      	b.n	800186e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001866:	887b      	ldrh	r3, [r7, #2]
 8001868:	041a      	lsls	r2, r3, #16
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	619a      	str	r2, [r3, #24]
}
 800186e:	bf00      	nop
 8001870:	370c      	adds	r7, #12
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr

0800187a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800187a:	b480      	push	{r7}
 800187c:	b085      	sub	sp, #20
 800187e:	af00      	add	r7, sp, #0
 8001880:	6078      	str	r0, [r7, #4]
 8001882:	460b      	mov	r3, r1
 8001884:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	695b      	ldr	r3, [r3, #20]
 800188a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800188c:	887a      	ldrh	r2, [r7, #2]
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	4013      	ands	r3, r2
 8001892:	041a      	lsls	r2, r3, #16
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	43d9      	mvns	r1, r3
 8001898:	887b      	ldrh	r3, [r7, #2]
 800189a:	400b      	ands	r3, r1
 800189c:	431a      	orrs	r2, r3
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	619a      	str	r2, [r3, #24]
}
 80018a2:	bf00      	nop
 80018a4:	3714      	adds	r7, #20
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr

080018ae <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80018ae:	b580      	push	{r7, lr}
 80018b0:	b082      	sub	sp, #8
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d101      	bne.n	80018c0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	e041      	b.n	8001944 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d106      	bne.n	80018da <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2200      	movs	r2, #0
 80018d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	f7fe fe81 	bl	80005dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2202      	movs	r2, #2
 80018de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	3304      	adds	r3, #4
 80018ea:	4619      	mov	r1, r3
 80018ec:	4610      	mov	r0, r2
 80018ee:	f000 f9cd 	bl	8001c8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2201      	movs	r2, #1
 80018f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2201      	movs	r2, #1
 80018fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2201      	movs	r2, #1
 8001906:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2201      	movs	r2, #1
 800190e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2201      	movs	r2, #1
 8001916:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2201      	movs	r2, #1
 800191e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2201      	movs	r2, #1
 8001926:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2201      	movs	r2, #1
 800192e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2201      	movs	r2, #1
 8001936:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2201      	movs	r2, #1
 800193e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001942:	2300      	movs	r3, #0
}
 8001944:	4618      	mov	r0, r3
 8001946:	3708      	adds	r7, #8
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}

0800194c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800194c:	b480      	push	{r7}
 800194e:	b085      	sub	sp, #20
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800195a:	b2db      	uxtb	r3, r3
 800195c:	2b01      	cmp	r3, #1
 800195e:	d001      	beq.n	8001964 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e04e      	b.n	8001a02 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2202      	movs	r2, #2
 8001968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	68da      	ldr	r2, [r3, #12]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f042 0201 	orr.w	r2, r2, #1
 800197a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a23      	ldr	r2, [pc, #140]	; (8001a10 <HAL_TIM_Base_Start_IT+0xc4>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d022      	beq.n	80019cc <HAL_TIM_Base_Start_IT+0x80>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800198e:	d01d      	beq.n	80019cc <HAL_TIM_Base_Start_IT+0x80>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a1f      	ldr	r2, [pc, #124]	; (8001a14 <HAL_TIM_Base_Start_IT+0xc8>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d018      	beq.n	80019cc <HAL_TIM_Base_Start_IT+0x80>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a1e      	ldr	r2, [pc, #120]	; (8001a18 <HAL_TIM_Base_Start_IT+0xcc>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d013      	beq.n	80019cc <HAL_TIM_Base_Start_IT+0x80>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a1c      	ldr	r2, [pc, #112]	; (8001a1c <HAL_TIM_Base_Start_IT+0xd0>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d00e      	beq.n	80019cc <HAL_TIM_Base_Start_IT+0x80>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a1b      	ldr	r2, [pc, #108]	; (8001a20 <HAL_TIM_Base_Start_IT+0xd4>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d009      	beq.n	80019cc <HAL_TIM_Base_Start_IT+0x80>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a19      	ldr	r2, [pc, #100]	; (8001a24 <HAL_TIM_Base_Start_IT+0xd8>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d004      	beq.n	80019cc <HAL_TIM_Base_Start_IT+0x80>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a18      	ldr	r2, [pc, #96]	; (8001a28 <HAL_TIM_Base_Start_IT+0xdc>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d111      	bne.n	80019f0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	f003 0307 	and.w	r3, r3, #7
 80019d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	2b06      	cmp	r3, #6
 80019dc:	d010      	beq.n	8001a00 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f042 0201 	orr.w	r2, r2, #1
 80019ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019ee:	e007      	b.n	8001a00 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f042 0201 	orr.w	r2, r2, #1
 80019fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001a00:	2300      	movs	r3, #0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3714      	adds	r7, #20
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	40010000 	.word	0x40010000
 8001a14:	40000400 	.word	0x40000400
 8001a18:	40000800 	.word	0x40000800
 8001a1c:	40000c00 	.word	0x40000c00
 8001a20:	40010400 	.word	0x40010400
 8001a24:	40014000 	.word	0x40014000
 8001a28:	40001800 	.word	0x40001800

08001a2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	691b      	ldr	r3, [r3, #16]
 8001a3a:	f003 0302 	and.w	r3, r3, #2
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d122      	bne.n	8001a88 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	f003 0302 	and.w	r3, r3, #2
 8001a4c:	2b02      	cmp	r3, #2
 8001a4e:	d11b      	bne.n	8001a88 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f06f 0202 	mvn.w	r2, #2
 8001a58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	699b      	ldr	r3, [r3, #24]
 8001a66:	f003 0303 	and.w	r3, r3, #3
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d003      	beq.n	8001a76 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	f000 f8ee 	bl	8001c50 <HAL_TIM_IC_CaptureCallback>
 8001a74:	e005      	b.n	8001a82 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f000 f8e0 	bl	8001c3c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a7c:	6878      	ldr	r0, [r7, #4]
 8001a7e:	f000 f8f1 	bl	8001c64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2200      	movs	r2, #0
 8001a86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	691b      	ldr	r3, [r3, #16]
 8001a8e:	f003 0304 	and.w	r3, r3, #4
 8001a92:	2b04      	cmp	r3, #4
 8001a94:	d122      	bne.n	8001adc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	f003 0304 	and.w	r3, r3, #4
 8001aa0:	2b04      	cmp	r3, #4
 8001aa2:	d11b      	bne.n	8001adc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f06f 0204 	mvn.w	r2, #4
 8001aac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2202      	movs	r2, #2
 8001ab2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	699b      	ldr	r3, [r3, #24]
 8001aba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d003      	beq.n	8001aca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f000 f8c4 	bl	8001c50 <HAL_TIM_IC_CaptureCallback>
 8001ac8:	e005      	b.n	8001ad6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f000 f8b6 	bl	8001c3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f000 f8c7 	bl	8001c64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	691b      	ldr	r3, [r3, #16]
 8001ae2:	f003 0308 	and.w	r3, r3, #8
 8001ae6:	2b08      	cmp	r3, #8
 8001ae8:	d122      	bne.n	8001b30 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	f003 0308 	and.w	r3, r3, #8
 8001af4:	2b08      	cmp	r3, #8
 8001af6:	d11b      	bne.n	8001b30 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f06f 0208 	mvn.w	r2, #8
 8001b00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2204      	movs	r2, #4
 8001b06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	69db      	ldr	r3, [r3, #28]
 8001b0e:	f003 0303 	and.w	r3, r3, #3
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d003      	beq.n	8001b1e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f000 f89a 	bl	8001c50 <HAL_TIM_IC_CaptureCallback>
 8001b1c:	e005      	b.n	8001b2a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f000 f88c 	bl	8001c3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f000 f89d 	bl	8001c64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	691b      	ldr	r3, [r3, #16]
 8001b36:	f003 0310 	and.w	r3, r3, #16
 8001b3a:	2b10      	cmp	r3, #16
 8001b3c:	d122      	bne.n	8001b84 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	f003 0310 	and.w	r3, r3, #16
 8001b48:	2b10      	cmp	r3, #16
 8001b4a:	d11b      	bne.n	8001b84 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f06f 0210 	mvn.w	r2, #16
 8001b54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2208      	movs	r2, #8
 8001b5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	69db      	ldr	r3, [r3, #28]
 8001b62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d003      	beq.n	8001b72 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f000 f870 	bl	8001c50 <HAL_TIM_IC_CaptureCallback>
 8001b70:	e005      	b.n	8001b7e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f000 f862 	bl	8001c3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	f000 f873 	bl	8001c64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2200      	movs	r2, #0
 8001b82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	691b      	ldr	r3, [r3, #16]
 8001b8a:	f003 0301 	and.w	r3, r3, #1
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d10e      	bne.n	8001bb0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	f003 0301 	and.w	r3, r3, #1
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d107      	bne.n	8001bb0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f06f 0201 	mvn.w	r2, #1
 8001ba8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f7fe fc82 	bl	80004b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	691b      	ldr	r3, [r3, #16]
 8001bb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bba:	2b80      	cmp	r3, #128	; 0x80
 8001bbc:	d10e      	bne.n	8001bdc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bc8:	2b80      	cmp	r3, #128	; 0x80
 8001bca:	d107      	bne.n	8001bdc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001bd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f000 f902 	bl	8001de0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	691b      	ldr	r3, [r3, #16]
 8001be2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001be6:	2b40      	cmp	r3, #64	; 0x40
 8001be8:	d10e      	bne.n	8001c08 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bf4:	2b40      	cmp	r3, #64	; 0x40
 8001bf6:	d107      	bne.n	8001c08 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001c00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f000 f838 	bl	8001c78 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	691b      	ldr	r3, [r3, #16]
 8001c0e:	f003 0320 	and.w	r3, r3, #32
 8001c12:	2b20      	cmp	r3, #32
 8001c14:	d10e      	bne.n	8001c34 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	f003 0320 	and.w	r3, r3, #32
 8001c20:	2b20      	cmp	r3, #32
 8001c22:	d107      	bne.n	8001c34 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f06f 0220 	mvn.w	r2, #32
 8001c2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f000 f8cc 	bl	8001dcc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001c34:	bf00      	nop
 8001c36:	3708      	adds	r7, #8
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001c44:	bf00      	nop
 8001c46:	370c      	adds	r7, #12
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr

08001c50 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001c58:	bf00      	nop
 8001c5a:	370c      	adds	r7, #12
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr

08001c64 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001c6c:	bf00      	nop
 8001c6e:	370c      	adds	r7, #12
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr

08001c78 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001c80:	bf00      	nop
 8001c82:	370c      	adds	r7, #12
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr

08001c8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b085      	sub	sp, #20
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	4a40      	ldr	r2, [pc, #256]	; (8001da0 <TIM_Base_SetConfig+0x114>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d013      	beq.n	8001ccc <TIM_Base_SetConfig+0x40>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001caa:	d00f      	beq.n	8001ccc <TIM_Base_SetConfig+0x40>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	4a3d      	ldr	r2, [pc, #244]	; (8001da4 <TIM_Base_SetConfig+0x118>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d00b      	beq.n	8001ccc <TIM_Base_SetConfig+0x40>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	4a3c      	ldr	r2, [pc, #240]	; (8001da8 <TIM_Base_SetConfig+0x11c>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d007      	beq.n	8001ccc <TIM_Base_SetConfig+0x40>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	4a3b      	ldr	r2, [pc, #236]	; (8001dac <TIM_Base_SetConfig+0x120>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d003      	beq.n	8001ccc <TIM_Base_SetConfig+0x40>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	4a3a      	ldr	r2, [pc, #232]	; (8001db0 <TIM_Base_SetConfig+0x124>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d108      	bne.n	8001cde <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	68fa      	ldr	r2, [r7, #12]
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4a2f      	ldr	r2, [pc, #188]	; (8001da0 <TIM_Base_SetConfig+0x114>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d02b      	beq.n	8001d3e <TIM_Base_SetConfig+0xb2>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cec:	d027      	beq.n	8001d3e <TIM_Base_SetConfig+0xb2>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4a2c      	ldr	r2, [pc, #176]	; (8001da4 <TIM_Base_SetConfig+0x118>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d023      	beq.n	8001d3e <TIM_Base_SetConfig+0xb2>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	4a2b      	ldr	r2, [pc, #172]	; (8001da8 <TIM_Base_SetConfig+0x11c>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d01f      	beq.n	8001d3e <TIM_Base_SetConfig+0xb2>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	4a2a      	ldr	r2, [pc, #168]	; (8001dac <TIM_Base_SetConfig+0x120>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d01b      	beq.n	8001d3e <TIM_Base_SetConfig+0xb2>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4a29      	ldr	r2, [pc, #164]	; (8001db0 <TIM_Base_SetConfig+0x124>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d017      	beq.n	8001d3e <TIM_Base_SetConfig+0xb2>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4a28      	ldr	r2, [pc, #160]	; (8001db4 <TIM_Base_SetConfig+0x128>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d013      	beq.n	8001d3e <TIM_Base_SetConfig+0xb2>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4a27      	ldr	r2, [pc, #156]	; (8001db8 <TIM_Base_SetConfig+0x12c>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d00f      	beq.n	8001d3e <TIM_Base_SetConfig+0xb2>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4a26      	ldr	r2, [pc, #152]	; (8001dbc <TIM_Base_SetConfig+0x130>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d00b      	beq.n	8001d3e <TIM_Base_SetConfig+0xb2>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4a25      	ldr	r2, [pc, #148]	; (8001dc0 <TIM_Base_SetConfig+0x134>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d007      	beq.n	8001d3e <TIM_Base_SetConfig+0xb2>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4a24      	ldr	r2, [pc, #144]	; (8001dc4 <TIM_Base_SetConfig+0x138>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d003      	beq.n	8001d3e <TIM_Base_SetConfig+0xb2>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4a23      	ldr	r2, [pc, #140]	; (8001dc8 <TIM_Base_SetConfig+0x13c>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d108      	bne.n	8001d50 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	68db      	ldr	r3, [r3, #12]
 8001d4a:	68fa      	ldr	r2, [r7, #12]
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	695b      	ldr	r3, [r3, #20]
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	68fa      	ldr	r2, [r7, #12]
 8001d62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	689a      	ldr	r2, [r3, #8]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	4a0a      	ldr	r2, [pc, #40]	; (8001da0 <TIM_Base_SetConfig+0x114>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d003      	beq.n	8001d84 <TIM_Base_SetConfig+0xf8>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	4a0c      	ldr	r2, [pc, #48]	; (8001db0 <TIM_Base_SetConfig+0x124>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d103      	bne.n	8001d8c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	691a      	ldr	r2, [r3, #16]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2201      	movs	r2, #1
 8001d90:	615a      	str	r2, [r3, #20]
}
 8001d92:	bf00      	nop
 8001d94:	3714      	adds	r7, #20
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	40010000 	.word	0x40010000
 8001da4:	40000400 	.word	0x40000400
 8001da8:	40000800 	.word	0x40000800
 8001dac:	40000c00 	.word	0x40000c00
 8001db0:	40010400 	.word	0x40010400
 8001db4:	40014000 	.word	0x40014000
 8001db8:	40014400 	.word	0x40014400
 8001dbc:	40014800 	.word	0x40014800
 8001dc0:	40001800 	.word	0x40001800
 8001dc4:	40001c00 	.word	0x40001c00
 8001dc8:	40002000 	.word	0x40002000

08001dcc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001dd4:	bf00      	nop
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001de8:	bf00      	nop
 8001dea:	370c      	adds	r7, #12
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr

08001df4 <__errno>:
 8001df4:	4b01      	ldr	r3, [pc, #4]	; (8001dfc <__errno+0x8>)
 8001df6:	6818      	ldr	r0, [r3, #0]
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	2000000c 	.word	0x2000000c

08001e00 <__libc_init_array>:
 8001e00:	b570      	push	{r4, r5, r6, lr}
 8001e02:	4d0d      	ldr	r5, [pc, #52]	; (8001e38 <__libc_init_array+0x38>)
 8001e04:	4c0d      	ldr	r4, [pc, #52]	; (8001e3c <__libc_init_array+0x3c>)
 8001e06:	1b64      	subs	r4, r4, r5
 8001e08:	10a4      	asrs	r4, r4, #2
 8001e0a:	2600      	movs	r6, #0
 8001e0c:	42a6      	cmp	r6, r4
 8001e0e:	d109      	bne.n	8001e24 <__libc_init_array+0x24>
 8001e10:	4d0b      	ldr	r5, [pc, #44]	; (8001e40 <__libc_init_array+0x40>)
 8001e12:	4c0c      	ldr	r4, [pc, #48]	; (8001e44 <__libc_init_array+0x44>)
 8001e14:	f000 ffae 	bl	8002d74 <_init>
 8001e18:	1b64      	subs	r4, r4, r5
 8001e1a:	10a4      	asrs	r4, r4, #2
 8001e1c:	2600      	movs	r6, #0
 8001e1e:	42a6      	cmp	r6, r4
 8001e20:	d105      	bne.n	8001e2e <__libc_init_array+0x2e>
 8001e22:	bd70      	pop	{r4, r5, r6, pc}
 8001e24:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e28:	4798      	blx	r3
 8001e2a:	3601      	adds	r6, #1
 8001e2c:	e7ee      	b.n	8001e0c <__libc_init_array+0xc>
 8001e2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e32:	4798      	blx	r3
 8001e34:	3601      	adds	r6, #1
 8001e36:	e7f2      	b.n	8001e1e <__libc_init_array+0x1e>
 8001e38:	08002e34 	.word	0x08002e34
 8001e3c:	08002e34 	.word	0x08002e34
 8001e40:	08002e34 	.word	0x08002e34
 8001e44:	08002e38 	.word	0x08002e38

08001e48 <memset>:
 8001e48:	4402      	add	r2, r0
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d100      	bne.n	8001e52 <memset+0xa>
 8001e50:	4770      	bx	lr
 8001e52:	f803 1b01 	strb.w	r1, [r3], #1
 8001e56:	e7f9      	b.n	8001e4c <memset+0x4>

08001e58 <iprintf>:
 8001e58:	b40f      	push	{r0, r1, r2, r3}
 8001e5a:	4b0a      	ldr	r3, [pc, #40]	; (8001e84 <iprintf+0x2c>)
 8001e5c:	b513      	push	{r0, r1, r4, lr}
 8001e5e:	681c      	ldr	r4, [r3, #0]
 8001e60:	b124      	cbz	r4, 8001e6c <iprintf+0x14>
 8001e62:	69a3      	ldr	r3, [r4, #24]
 8001e64:	b913      	cbnz	r3, 8001e6c <iprintf+0x14>
 8001e66:	4620      	mov	r0, r4
 8001e68:	f000 f866 	bl	8001f38 <__sinit>
 8001e6c:	ab05      	add	r3, sp, #20
 8001e6e:	9a04      	ldr	r2, [sp, #16]
 8001e70:	68a1      	ldr	r1, [r4, #8]
 8001e72:	9301      	str	r3, [sp, #4]
 8001e74:	4620      	mov	r0, r4
 8001e76:	f000 f9bd 	bl	80021f4 <_vfiprintf_r>
 8001e7a:	b002      	add	sp, #8
 8001e7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001e80:	b004      	add	sp, #16
 8001e82:	4770      	bx	lr
 8001e84:	2000000c 	.word	0x2000000c

08001e88 <std>:
 8001e88:	2300      	movs	r3, #0
 8001e8a:	b510      	push	{r4, lr}
 8001e8c:	4604      	mov	r4, r0
 8001e8e:	e9c0 3300 	strd	r3, r3, [r0]
 8001e92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001e96:	6083      	str	r3, [r0, #8]
 8001e98:	8181      	strh	r1, [r0, #12]
 8001e9a:	6643      	str	r3, [r0, #100]	; 0x64
 8001e9c:	81c2      	strh	r2, [r0, #14]
 8001e9e:	6183      	str	r3, [r0, #24]
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	2208      	movs	r2, #8
 8001ea4:	305c      	adds	r0, #92	; 0x5c
 8001ea6:	f7ff ffcf 	bl	8001e48 <memset>
 8001eaa:	4b05      	ldr	r3, [pc, #20]	; (8001ec0 <std+0x38>)
 8001eac:	6263      	str	r3, [r4, #36]	; 0x24
 8001eae:	4b05      	ldr	r3, [pc, #20]	; (8001ec4 <std+0x3c>)
 8001eb0:	62a3      	str	r3, [r4, #40]	; 0x28
 8001eb2:	4b05      	ldr	r3, [pc, #20]	; (8001ec8 <std+0x40>)
 8001eb4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001eb6:	4b05      	ldr	r3, [pc, #20]	; (8001ecc <std+0x44>)
 8001eb8:	6224      	str	r4, [r4, #32]
 8001eba:	6323      	str	r3, [r4, #48]	; 0x30
 8001ebc:	bd10      	pop	{r4, pc}
 8001ebe:	bf00      	nop
 8001ec0:	0800279d 	.word	0x0800279d
 8001ec4:	080027bf 	.word	0x080027bf
 8001ec8:	080027f7 	.word	0x080027f7
 8001ecc:	0800281b 	.word	0x0800281b

08001ed0 <_cleanup_r>:
 8001ed0:	4901      	ldr	r1, [pc, #4]	; (8001ed8 <_cleanup_r+0x8>)
 8001ed2:	f000 b8af 	b.w	8002034 <_fwalk_reent>
 8001ed6:	bf00      	nop
 8001ed8:	08002af5 	.word	0x08002af5

08001edc <__sfmoreglue>:
 8001edc:	b570      	push	{r4, r5, r6, lr}
 8001ede:	2268      	movs	r2, #104	; 0x68
 8001ee0:	1e4d      	subs	r5, r1, #1
 8001ee2:	4355      	muls	r5, r2
 8001ee4:	460e      	mov	r6, r1
 8001ee6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001eea:	f000 f8e5 	bl	80020b8 <_malloc_r>
 8001eee:	4604      	mov	r4, r0
 8001ef0:	b140      	cbz	r0, 8001f04 <__sfmoreglue+0x28>
 8001ef2:	2100      	movs	r1, #0
 8001ef4:	e9c0 1600 	strd	r1, r6, [r0]
 8001ef8:	300c      	adds	r0, #12
 8001efa:	60a0      	str	r0, [r4, #8]
 8001efc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001f00:	f7ff ffa2 	bl	8001e48 <memset>
 8001f04:	4620      	mov	r0, r4
 8001f06:	bd70      	pop	{r4, r5, r6, pc}

08001f08 <__sfp_lock_acquire>:
 8001f08:	4801      	ldr	r0, [pc, #4]	; (8001f10 <__sfp_lock_acquire+0x8>)
 8001f0a:	f000 b8b3 	b.w	8002074 <__retarget_lock_acquire_recursive>
 8001f0e:	bf00      	nop
 8001f10:	20000125 	.word	0x20000125

08001f14 <__sfp_lock_release>:
 8001f14:	4801      	ldr	r0, [pc, #4]	; (8001f1c <__sfp_lock_release+0x8>)
 8001f16:	f000 b8ae 	b.w	8002076 <__retarget_lock_release_recursive>
 8001f1a:	bf00      	nop
 8001f1c:	20000125 	.word	0x20000125

08001f20 <__sinit_lock_acquire>:
 8001f20:	4801      	ldr	r0, [pc, #4]	; (8001f28 <__sinit_lock_acquire+0x8>)
 8001f22:	f000 b8a7 	b.w	8002074 <__retarget_lock_acquire_recursive>
 8001f26:	bf00      	nop
 8001f28:	20000126 	.word	0x20000126

08001f2c <__sinit_lock_release>:
 8001f2c:	4801      	ldr	r0, [pc, #4]	; (8001f34 <__sinit_lock_release+0x8>)
 8001f2e:	f000 b8a2 	b.w	8002076 <__retarget_lock_release_recursive>
 8001f32:	bf00      	nop
 8001f34:	20000126 	.word	0x20000126

08001f38 <__sinit>:
 8001f38:	b510      	push	{r4, lr}
 8001f3a:	4604      	mov	r4, r0
 8001f3c:	f7ff fff0 	bl	8001f20 <__sinit_lock_acquire>
 8001f40:	69a3      	ldr	r3, [r4, #24]
 8001f42:	b11b      	cbz	r3, 8001f4c <__sinit+0x14>
 8001f44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001f48:	f7ff bff0 	b.w	8001f2c <__sinit_lock_release>
 8001f4c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001f50:	6523      	str	r3, [r4, #80]	; 0x50
 8001f52:	4b13      	ldr	r3, [pc, #76]	; (8001fa0 <__sinit+0x68>)
 8001f54:	4a13      	ldr	r2, [pc, #76]	; (8001fa4 <__sinit+0x6c>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	62a2      	str	r2, [r4, #40]	; 0x28
 8001f5a:	42a3      	cmp	r3, r4
 8001f5c:	bf04      	itt	eq
 8001f5e:	2301      	moveq	r3, #1
 8001f60:	61a3      	streq	r3, [r4, #24]
 8001f62:	4620      	mov	r0, r4
 8001f64:	f000 f820 	bl	8001fa8 <__sfp>
 8001f68:	6060      	str	r0, [r4, #4]
 8001f6a:	4620      	mov	r0, r4
 8001f6c:	f000 f81c 	bl	8001fa8 <__sfp>
 8001f70:	60a0      	str	r0, [r4, #8]
 8001f72:	4620      	mov	r0, r4
 8001f74:	f000 f818 	bl	8001fa8 <__sfp>
 8001f78:	2200      	movs	r2, #0
 8001f7a:	60e0      	str	r0, [r4, #12]
 8001f7c:	2104      	movs	r1, #4
 8001f7e:	6860      	ldr	r0, [r4, #4]
 8001f80:	f7ff ff82 	bl	8001e88 <std>
 8001f84:	68a0      	ldr	r0, [r4, #8]
 8001f86:	2201      	movs	r2, #1
 8001f88:	2109      	movs	r1, #9
 8001f8a:	f7ff ff7d 	bl	8001e88 <std>
 8001f8e:	68e0      	ldr	r0, [r4, #12]
 8001f90:	2202      	movs	r2, #2
 8001f92:	2112      	movs	r1, #18
 8001f94:	f7ff ff78 	bl	8001e88 <std>
 8001f98:	2301      	movs	r3, #1
 8001f9a:	61a3      	str	r3, [r4, #24]
 8001f9c:	e7d2      	b.n	8001f44 <__sinit+0xc>
 8001f9e:	bf00      	nop
 8001fa0:	08002d9c 	.word	0x08002d9c
 8001fa4:	08001ed1 	.word	0x08001ed1

08001fa8 <__sfp>:
 8001fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001faa:	4607      	mov	r7, r0
 8001fac:	f7ff ffac 	bl	8001f08 <__sfp_lock_acquire>
 8001fb0:	4b1e      	ldr	r3, [pc, #120]	; (800202c <__sfp+0x84>)
 8001fb2:	681e      	ldr	r6, [r3, #0]
 8001fb4:	69b3      	ldr	r3, [r6, #24]
 8001fb6:	b913      	cbnz	r3, 8001fbe <__sfp+0x16>
 8001fb8:	4630      	mov	r0, r6
 8001fba:	f7ff ffbd 	bl	8001f38 <__sinit>
 8001fbe:	3648      	adds	r6, #72	; 0x48
 8001fc0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001fc4:	3b01      	subs	r3, #1
 8001fc6:	d503      	bpl.n	8001fd0 <__sfp+0x28>
 8001fc8:	6833      	ldr	r3, [r6, #0]
 8001fca:	b30b      	cbz	r3, 8002010 <__sfp+0x68>
 8001fcc:	6836      	ldr	r6, [r6, #0]
 8001fce:	e7f7      	b.n	8001fc0 <__sfp+0x18>
 8001fd0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001fd4:	b9d5      	cbnz	r5, 800200c <__sfp+0x64>
 8001fd6:	4b16      	ldr	r3, [pc, #88]	; (8002030 <__sfp+0x88>)
 8001fd8:	60e3      	str	r3, [r4, #12]
 8001fda:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001fde:	6665      	str	r5, [r4, #100]	; 0x64
 8001fe0:	f000 f847 	bl	8002072 <__retarget_lock_init_recursive>
 8001fe4:	f7ff ff96 	bl	8001f14 <__sfp_lock_release>
 8001fe8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001fec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001ff0:	6025      	str	r5, [r4, #0]
 8001ff2:	61a5      	str	r5, [r4, #24]
 8001ff4:	2208      	movs	r2, #8
 8001ff6:	4629      	mov	r1, r5
 8001ff8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001ffc:	f7ff ff24 	bl	8001e48 <memset>
 8002000:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002004:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002008:	4620      	mov	r0, r4
 800200a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800200c:	3468      	adds	r4, #104	; 0x68
 800200e:	e7d9      	b.n	8001fc4 <__sfp+0x1c>
 8002010:	2104      	movs	r1, #4
 8002012:	4638      	mov	r0, r7
 8002014:	f7ff ff62 	bl	8001edc <__sfmoreglue>
 8002018:	4604      	mov	r4, r0
 800201a:	6030      	str	r0, [r6, #0]
 800201c:	2800      	cmp	r0, #0
 800201e:	d1d5      	bne.n	8001fcc <__sfp+0x24>
 8002020:	f7ff ff78 	bl	8001f14 <__sfp_lock_release>
 8002024:	230c      	movs	r3, #12
 8002026:	603b      	str	r3, [r7, #0]
 8002028:	e7ee      	b.n	8002008 <__sfp+0x60>
 800202a:	bf00      	nop
 800202c:	08002d9c 	.word	0x08002d9c
 8002030:	ffff0001 	.word	0xffff0001

08002034 <_fwalk_reent>:
 8002034:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002038:	4606      	mov	r6, r0
 800203a:	4688      	mov	r8, r1
 800203c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002040:	2700      	movs	r7, #0
 8002042:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002046:	f1b9 0901 	subs.w	r9, r9, #1
 800204a:	d505      	bpl.n	8002058 <_fwalk_reent+0x24>
 800204c:	6824      	ldr	r4, [r4, #0]
 800204e:	2c00      	cmp	r4, #0
 8002050:	d1f7      	bne.n	8002042 <_fwalk_reent+0xe>
 8002052:	4638      	mov	r0, r7
 8002054:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002058:	89ab      	ldrh	r3, [r5, #12]
 800205a:	2b01      	cmp	r3, #1
 800205c:	d907      	bls.n	800206e <_fwalk_reent+0x3a>
 800205e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002062:	3301      	adds	r3, #1
 8002064:	d003      	beq.n	800206e <_fwalk_reent+0x3a>
 8002066:	4629      	mov	r1, r5
 8002068:	4630      	mov	r0, r6
 800206a:	47c0      	blx	r8
 800206c:	4307      	orrs	r7, r0
 800206e:	3568      	adds	r5, #104	; 0x68
 8002070:	e7e9      	b.n	8002046 <_fwalk_reent+0x12>

08002072 <__retarget_lock_init_recursive>:
 8002072:	4770      	bx	lr

08002074 <__retarget_lock_acquire_recursive>:
 8002074:	4770      	bx	lr

08002076 <__retarget_lock_release_recursive>:
 8002076:	4770      	bx	lr

08002078 <sbrk_aligned>:
 8002078:	b570      	push	{r4, r5, r6, lr}
 800207a:	4e0e      	ldr	r6, [pc, #56]	; (80020b4 <sbrk_aligned+0x3c>)
 800207c:	460c      	mov	r4, r1
 800207e:	6831      	ldr	r1, [r6, #0]
 8002080:	4605      	mov	r5, r0
 8002082:	b911      	cbnz	r1, 800208a <sbrk_aligned+0x12>
 8002084:	f000 fb7a 	bl	800277c <_sbrk_r>
 8002088:	6030      	str	r0, [r6, #0]
 800208a:	4621      	mov	r1, r4
 800208c:	4628      	mov	r0, r5
 800208e:	f000 fb75 	bl	800277c <_sbrk_r>
 8002092:	1c43      	adds	r3, r0, #1
 8002094:	d00a      	beq.n	80020ac <sbrk_aligned+0x34>
 8002096:	1cc4      	adds	r4, r0, #3
 8002098:	f024 0403 	bic.w	r4, r4, #3
 800209c:	42a0      	cmp	r0, r4
 800209e:	d007      	beq.n	80020b0 <sbrk_aligned+0x38>
 80020a0:	1a21      	subs	r1, r4, r0
 80020a2:	4628      	mov	r0, r5
 80020a4:	f000 fb6a 	bl	800277c <_sbrk_r>
 80020a8:	3001      	adds	r0, #1
 80020aa:	d101      	bne.n	80020b0 <sbrk_aligned+0x38>
 80020ac:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80020b0:	4620      	mov	r0, r4
 80020b2:	bd70      	pop	{r4, r5, r6, pc}
 80020b4:	2000012c 	.word	0x2000012c

080020b8 <_malloc_r>:
 80020b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80020bc:	1ccd      	adds	r5, r1, #3
 80020be:	f025 0503 	bic.w	r5, r5, #3
 80020c2:	3508      	adds	r5, #8
 80020c4:	2d0c      	cmp	r5, #12
 80020c6:	bf38      	it	cc
 80020c8:	250c      	movcc	r5, #12
 80020ca:	2d00      	cmp	r5, #0
 80020cc:	4607      	mov	r7, r0
 80020ce:	db01      	blt.n	80020d4 <_malloc_r+0x1c>
 80020d0:	42a9      	cmp	r1, r5
 80020d2:	d905      	bls.n	80020e0 <_malloc_r+0x28>
 80020d4:	230c      	movs	r3, #12
 80020d6:	603b      	str	r3, [r7, #0]
 80020d8:	2600      	movs	r6, #0
 80020da:	4630      	mov	r0, r6
 80020dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80020e0:	4e2e      	ldr	r6, [pc, #184]	; (800219c <_malloc_r+0xe4>)
 80020e2:	f000 fdbb 	bl	8002c5c <__malloc_lock>
 80020e6:	6833      	ldr	r3, [r6, #0]
 80020e8:	461c      	mov	r4, r3
 80020ea:	bb34      	cbnz	r4, 800213a <_malloc_r+0x82>
 80020ec:	4629      	mov	r1, r5
 80020ee:	4638      	mov	r0, r7
 80020f0:	f7ff ffc2 	bl	8002078 <sbrk_aligned>
 80020f4:	1c43      	adds	r3, r0, #1
 80020f6:	4604      	mov	r4, r0
 80020f8:	d14d      	bne.n	8002196 <_malloc_r+0xde>
 80020fa:	6834      	ldr	r4, [r6, #0]
 80020fc:	4626      	mov	r6, r4
 80020fe:	2e00      	cmp	r6, #0
 8002100:	d140      	bne.n	8002184 <_malloc_r+0xcc>
 8002102:	6823      	ldr	r3, [r4, #0]
 8002104:	4631      	mov	r1, r6
 8002106:	4638      	mov	r0, r7
 8002108:	eb04 0803 	add.w	r8, r4, r3
 800210c:	f000 fb36 	bl	800277c <_sbrk_r>
 8002110:	4580      	cmp	r8, r0
 8002112:	d13a      	bne.n	800218a <_malloc_r+0xd2>
 8002114:	6821      	ldr	r1, [r4, #0]
 8002116:	3503      	adds	r5, #3
 8002118:	1a6d      	subs	r5, r5, r1
 800211a:	f025 0503 	bic.w	r5, r5, #3
 800211e:	3508      	adds	r5, #8
 8002120:	2d0c      	cmp	r5, #12
 8002122:	bf38      	it	cc
 8002124:	250c      	movcc	r5, #12
 8002126:	4629      	mov	r1, r5
 8002128:	4638      	mov	r0, r7
 800212a:	f7ff ffa5 	bl	8002078 <sbrk_aligned>
 800212e:	3001      	adds	r0, #1
 8002130:	d02b      	beq.n	800218a <_malloc_r+0xd2>
 8002132:	6823      	ldr	r3, [r4, #0]
 8002134:	442b      	add	r3, r5
 8002136:	6023      	str	r3, [r4, #0]
 8002138:	e00e      	b.n	8002158 <_malloc_r+0xa0>
 800213a:	6822      	ldr	r2, [r4, #0]
 800213c:	1b52      	subs	r2, r2, r5
 800213e:	d41e      	bmi.n	800217e <_malloc_r+0xc6>
 8002140:	2a0b      	cmp	r2, #11
 8002142:	d916      	bls.n	8002172 <_malloc_r+0xba>
 8002144:	1961      	adds	r1, r4, r5
 8002146:	42a3      	cmp	r3, r4
 8002148:	6025      	str	r5, [r4, #0]
 800214a:	bf18      	it	ne
 800214c:	6059      	strne	r1, [r3, #4]
 800214e:	6863      	ldr	r3, [r4, #4]
 8002150:	bf08      	it	eq
 8002152:	6031      	streq	r1, [r6, #0]
 8002154:	5162      	str	r2, [r4, r5]
 8002156:	604b      	str	r3, [r1, #4]
 8002158:	4638      	mov	r0, r7
 800215a:	f104 060b 	add.w	r6, r4, #11
 800215e:	f000 fd83 	bl	8002c68 <__malloc_unlock>
 8002162:	f026 0607 	bic.w	r6, r6, #7
 8002166:	1d23      	adds	r3, r4, #4
 8002168:	1af2      	subs	r2, r6, r3
 800216a:	d0b6      	beq.n	80020da <_malloc_r+0x22>
 800216c:	1b9b      	subs	r3, r3, r6
 800216e:	50a3      	str	r3, [r4, r2]
 8002170:	e7b3      	b.n	80020da <_malloc_r+0x22>
 8002172:	6862      	ldr	r2, [r4, #4]
 8002174:	42a3      	cmp	r3, r4
 8002176:	bf0c      	ite	eq
 8002178:	6032      	streq	r2, [r6, #0]
 800217a:	605a      	strne	r2, [r3, #4]
 800217c:	e7ec      	b.n	8002158 <_malloc_r+0xa0>
 800217e:	4623      	mov	r3, r4
 8002180:	6864      	ldr	r4, [r4, #4]
 8002182:	e7b2      	b.n	80020ea <_malloc_r+0x32>
 8002184:	4634      	mov	r4, r6
 8002186:	6876      	ldr	r6, [r6, #4]
 8002188:	e7b9      	b.n	80020fe <_malloc_r+0x46>
 800218a:	230c      	movs	r3, #12
 800218c:	603b      	str	r3, [r7, #0]
 800218e:	4638      	mov	r0, r7
 8002190:	f000 fd6a 	bl	8002c68 <__malloc_unlock>
 8002194:	e7a1      	b.n	80020da <_malloc_r+0x22>
 8002196:	6025      	str	r5, [r4, #0]
 8002198:	e7de      	b.n	8002158 <_malloc_r+0xa0>
 800219a:	bf00      	nop
 800219c:	20000128 	.word	0x20000128

080021a0 <__sfputc_r>:
 80021a0:	6893      	ldr	r3, [r2, #8]
 80021a2:	3b01      	subs	r3, #1
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	b410      	push	{r4}
 80021a8:	6093      	str	r3, [r2, #8]
 80021aa:	da08      	bge.n	80021be <__sfputc_r+0x1e>
 80021ac:	6994      	ldr	r4, [r2, #24]
 80021ae:	42a3      	cmp	r3, r4
 80021b0:	db01      	blt.n	80021b6 <__sfputc_r+0x16>
 80021b2:	290a      	cmp	r1, #10
 80021b4:	d103      	bne.n	80021be <__sfputc_r+0x1e>
 80021b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80021ba:	f000 bb33 	b.w	8002824 <__swbuf_r>
 80021be:	6813      	ldr	r3, [r2, #0]
 80021c0:	1c58      	adds	r0, r3, #1
 80021c2:	6010      	str	r0, [r2, #0]
 80021c4:	7019      	strb	r1, [r3, #0]
 80021c6:	4608      	mov	r0, r1
 80021c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80021cc:	4770      	bx	lr

080021ce <__sfputs_r>:
 80021ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021d0:	4606      	mov	r6, r0
 80021d2:	460f      	mov	r7, r1
 80021d4:	4614      	mov	r4, r2
 80021d6:	18d5      	adds	r5, r2, r3
 80021d8:	42ac      	cmp	r4, r5
 80021da:	d101      	bne.n	80021e0 <__sfputs_r+0x12>
 80021dc:	2000      	movs	r0, #0
 80021de:	e007      	b.n	80021f0 <__sfputs_r+0x22>
 80021e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80021e4:	463a      	mov	r2, r7
 80021e6:	4630      	mov	r0, r6
 80021e8:	f7ff ffda 	bl	80021a0 <__sfputc_r>
 80021ec:	1c43      	adds	r3, r0, #1
 80021ee:	d1f3      	bne.n	80021d8 <__sfputs_r+0xa>
 80021f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080021f4 <_vfiprintf_r>:
 80021f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021f8:	460d      	mov	r5, r1
 80021fa:	b09d      	sub	sp, #116	; 0x74
 80021fc:	4614      	mov	r4, r2
 80021fe:	4698      	mov	r8, r3
 8002200:	4606      	mov	r6, r0
 8002202:	b118      	cbz	r0, 800220c <_vfiprintf_r+0x18>
 8002204:	6983      	ldr	r3, [r0, #24]
 8002206:	b90b      	cbnz	r3, 800220c <_vfiprintf_r+0x18>
 8002208:	f7ff fe96 	bl	8001f38 <__sinit>
 800220c:	4b89      	ldr	r3, [pc, #548]	; (8002434 <_vfiprintf_r+0x240>)
 800220e:	429d      	cmp	r5, r3
 8002210:	d11b      	bne.n	800224a <_vfiprintf_r+0x56>
 8002212:	6875      	ldr	r5, [r6, #4]
 8002214:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002216:	07d9      	lsls	r1, r3, #31
 8002218:	d405      	bmi.n	8002226 <_vfiprintf_r+0x32>
 800221a:	89ab      	ldrh	r3, [r5, #12]
 800221c:	059a      	lsls	r2, r3, #22
 800221e:	d402      	bmi.n	8002226 <_vfiprintf_r+0x32>
 8002220:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002222:	f7ff ff27 	bl	8002074 <__retarget_lock_acquire_recursive>
 8002226:	89ab      	ldrh	r3, [r5, #12]
 8002228:	071b      	lsls	r3, r3, #28
 800222a:	d501      	bpl.n	8002230 <_vfiprintf_r+0x3c>
 800222c:	692b      	ldr	r3, [r5, #16]
 800222e:	b9eb      	cbnz	r3, 800226c <_vfiprintf_r+0x78>
 8002230:	4629      	mov	r1, r5
 8002232:	4630      	mov	r0, r6
 8002234:	f000 fb5a 	bl	80028ec <__swsetup_r>
 8002238:	b1c0      	cbz	r0, 800226c <_vfiprintf_r+0x78>
 800223a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800223c:	07dc      	lsls	r4, r3, #31
 800223e:	d50e      	bpl.n	800225e <_vfiprintf_r+0x6a>
 8002240:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002244:	b01d      	add	sp, #116	; 0x74
 8002246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800224a:	4b7b      	ldr	r3, [pc, #492]	; (8002438 <_vfiprintf_r+0x244>)
 800224c:	429d      	cmp	r5, r3
 800224e:	d101      	bne.n	8002254 <_vfiprintf_r+0x60>
 8002250:	68b5      	ldr	r5, [r6, #8]
 8002252:	e7df      	b.n	8002214 <_vfiprintf_r+0x20>
 8002254:	4b79      	ldr	r3, [pc, #484]	; (800243c <_vfiprintf_r+0x248>)
 8002256:	429d      	cmp	r5, r3
 8002258:	bf08      	it	eq
 800225a:	68f5      	ldreq	r5, [r6, #12]
 800225c:	e7da      	b.n	8002214 <_vfiprintf_r+0x20>
 800225e:	89ab      	ldrh	r3, [r5, #12]
 8002260:	0598      	lsls	r0, r3, #22
 8002262:	d4ed      	bmi.n	8002240 <_vfiprintf_r+0x4c>
 8002264:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002266:	f7ff ff06 	bl	8002076 <__retarget_lock_release_recursive>
 800226a:	e7e9      	b.n	8002240 <_vfiprintf_r+0x4c>
 800226c:	2300      	movs	r3, #0
 800226e:	9309      	str	r3, [sp, #36]	; 0x24
 8002270:	2320      	movs	r3, #32
 8002272:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002276:	f8cd 800c 	str.w	r8, [sp, #12]
 800227a:	2330      	movs	r3, #48	; 0x30
 800227c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8002440 <_vfiprintf_r+0x24c>
 8002280:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002284:	f04f 0901 	mov.w	r9, #1
 8002288:	4623      	mov	r3, r4
 800228a:	469a      	mov	sl, r3
 800228c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002290:	b10a      	cbz	r2, 8002296 <_vfiprintf_r+0xa2>
 8002292:	2a25      	cmp	r2, #37	; 0x25
 8002294:	d1f9      	bne.n	800228a <_vfiprintf_r+0x96>
 8002296:	ebba 0b04 	subs.w	fp, sl, r4
 800229a:	d00b      	beq.n	80022b4 <_vfiprintf_r+0xc0>
 800229c:	465b      	mov	r3, fp
 800229e:	4622      	mov	r2, r4
 80022a0:	4629      	mov	r1, r5
 80022a2:	4630      	mov	r0, r6
 80022a4:	f7ff ff93 	bl	80021ce <__sfputs_r>
 80022a8:	3001      	adds	r0, #1
 80022aa:	f000 80aa 	beq.w	8002402 <_vfiprintf_r+0x20e>
 80022ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80022b0:	445a      	add	r2, fp
 80022b2:	9209      	str	r2, [sp, #36]	; 0x24
 80022b4:	f89a 3000 	ldrb.w	r3, [sl]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	f000 80a2 	beq.w	8002402 <_vfiprintf_r+0x20e>
 80022be:	2300      	movs	r3, #0
 80022c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80022c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80022c8:	f10a 0a01 	add.w	sl, sl, #1
 80022cc:	9304      	str	r3, [sp, #16]
 80022ce:	9307      	str	r3, [sp, #28]
 80022d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80022d4:	931a      	str	r3, [sp, #104]	; 0x68
 80022d6:	4654      	mov	r4, sl
 80022d8:	2205      	movs	r2, #5
 80022da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80022de:	4858      	ldr	r0, [pc, #352]	; (8002440 <_vfiprintf_r+0x24c>)
 80022e0:	f7fd ff96 	bl	8000210 <memchr>
 80022e4:	9a04      	ldr	r2, [sp, #16]
 80022e6:	b9d8      	cbnz	r0, 8002320 <_vfiprintf_r+0x12c>
 80022e8:	06d1      	lsls	r1, r2, #27
 80022ea:	bf44      	itt	mi
 80022ec:	2320      	movmi	r3, #32
 80022ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80022f2:	0713      	lsls	r3, r2, #28
 80022f4:	bf44      	itt	mi
 80022f6:	232b      	movmi	r3, #43	; 0x2b
 80022f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80022fc:	f89a 3000 	ldrb.w	r3, [sl]
 8002300:	2b2a      	cmp	r3, #42	; 0x2a
 8002302:	d015      	beq.n	8002330 <_vfiprintf_r+0x13c>
 8002304:	9a07      	ldr	r2, [sp, #28]
 8002306:	4654      	mov	r4, sl
 8002308:	2000      	movs	r0, #0
 800230a:	f04f 0c0a 	mov.w	ip, #10
 800230e:	4621      	mov	r1, r4
 8002310:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002314:	3b30      	subs	r3, #48	; 0x30
 8002316:	2b09      	cmp	r3, #9
 8002318:	d94e      	bls.n	80023b8 <_vfiprintf_r+0x1c4>
 800231a:	b1b0      	cbz	r0, 800234a <_vfiprintf_r+0x156>
 800231c:	9207      	str	r2, [sp, #28]
 800231e:	e014      	b.n	800234a <_vfiprintf_r+0x156>
 8002320:	eba0 0308 	sub.w	r3, r0, r8
 8002324:	fa09 f303 	lsl.w	r3, r9, r3
 8002328:	4313      	orrs	r3, r2
 800232a:	9304      	str	r3, [sp, #16]
 800232c:	46a2      	mov	sl, r4
 800232e:	e7d2      	b.n	80022d6 <_vfiprintf_r+0xe2>
 8002330:	9b03      	ldr	r3, [sp, #12]
 8002332:	1d19      	adds	r1, r3, #4
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	9103      	str	r1, [sp, #12]
 8002338:	2b00      	cmp	r3, #0
 800233a:	bfbb      	ittet	lt
 800233c:	425b      	neglt	r3, r3
 800233e:	f042 0202 	orrlt.w	r2, r2, #2
 8002342:	9307      	strge	r3, [sp, #28]
 8002344:	9307      	strlt	r3, [sp, #28]
 8002346:	bfb8      	it	lt
 8002348:	9204      	strlt	r2, [sp, #16]
 800234a:	7823      	ldrb	r3, [r4, #0]
 800234c:	2b2e      	cmp	r3, #46	; 0x2e
 800234e:	d10c      	bne.n	800236a <_vfiprintf_r+0x176>
 8002350:	7863      	ldrb	r3, [r4, #1]
 8002352:	2b2a      	cmp	r3, #42	; 0x2a
 8002354:	d135      	bne.n	80023c2 <_vfiprintf_r+0x1ce>
 8002356:	9b03      	ldr	r3, [sp, #12]
 8002358:	1d1a      	adds	r2, r3, #4
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	9203      	str	r2, [sp, #12]
 800235e:	2b00      	cmp	r3, #0
 8002360:	bfb8      	it	lt
 8002362:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002366:	3402      	adds	r4, #2
 8002368:	9305      	str	r3, [sp, #20]
 800236a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8002450 <_vfiprintf_r+0x25c>
 800236e:	7821      	ldrb	r1, [r4, #0]
 8002370:	2203      	movs	r2, #3
 8002372:	4650      	mov	r0, sl
 8002374:	f7fd ff4c 	bl	8000210 <memchr>
 8002378:	b140      	cbz	r0, 800238c <_vfiprintf_r+0x198>
 800237a:	2340      	movs	r3, #64	; 0x40
 800237c:	eba0 000a 	sub.w	r0, r0, sl
 8002380:	fa03 f000 	lsl.w	r0, r3, r0
 8002384:	9b04      	ldr	r3, [sp, #16]
 8002386:	4303      	orrs	r3, r0
 8002388:	3401      	adds	r4, #1
 800238a:	9304      	str	r3, [sp, #16]
 800238c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002390:	482c      	ldr	r0, [pc, #176]	; (8002444 <_vfiprintf_r+0x250>)
 8002392:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002396:	2206      	movs	r2, #6
 8002398:	f7fd ff3a 	bl	8000210 <memchr>
 800239c:	2800      	cmp	r0, #0
 800239e:	d03f      	beq.n	8002420 <_vfiprintf_r+0x22c>
 80023a0:	4b29      	ldr	r3, [pc, #164]	; (8002448 <_vfiprintf_r+0x254>)
 80023a2:	bb1b      	cbnz	r3, 80023ec <_vfiprintf_r+0x1f8>
 80023a4:	9b03      	ldr	r3, [sp, #12]
 80023a6:	3307      	adds	r3, #7
 80023a8:	f023 0307 	bic.w	r3, r3, #7
 80023ac:	3308      	adds	r3, #8
 80023ae:	9303      	str	r3, [sp, #12]
 80023b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80023b2:	443b      	add	r3, r7
 80023b4:	9309      	str	r3, [sp, #36]	; 0x24
 80023b6:	e767      	b.n	8002288 <_vfiprintf_r+0x94>
 80023b8:	fb0c 3202 	mla	r2, ip, r2, r3
 80023bc:	460c      	mov	r4, r1
 80023be:	2001      	movs	r0, #1
 80023c0:	e7a5      	b.n	800230e <_vfiprintf_r+0x11a>
 80023c2:	2300      	movs	r3, #0
 80023c4:	3401      	adds	r4, #1
 80023c6:	9305      	str	r3, [sp, #20]
 80023c8:	4619      	mov	r1, r3
 80023ca:	f04f 0c0a 	mov.w	ip, #10
 80023ce:	4620      	mov	r0, r4
 80023d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80023d4:	3a30      	subs	r2, #48	; 0x30
 80023d6:	2a09      	cmp	r2, #9
 80023d8:	d903      	bls.n	80023e2 <_vfiprintf_r+0x1ee>
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d0c5      	beq.n	800236a <_vfiprintf_r+0x176>
 80023de:	9105      	str	r1, [sp, #20]
 80023e0:	e7c3      	b.n	800236a <_vfiprintf_r+0x176>
 80023e2:	fb0c 2101 	mla	r1, ip, r1, r2
 80023e6:	4604      	mov	r4, r0
 80023e8:	2301      	movs	r3, #1
 80023ea:	e7f0      	b.n	80023ce <_vfiprintf_r+0x1da>
 80023ec:	ab03      	add	r3, sp, #12
 80023ee:	9300      	str	r3, [sp, #0]
 80023f0:	462a      	mov	r2, r5
 80023f2:	4b16      	ldr	r3, [pc, #88]	; (800244c <_vfiprintf_r+0x258>)
 80023f4:	a904      	add	r1, sp, #16
 80023f6:	4630      	mov	r0, r6
 80023f8:	f3af 8000 	nop.w
 80023fc:	4607      	mov	r7, r0
 80023fe:	1c78      	adds	r0, r7, #1
 8002400:	d1d6      	bne.n	80023b0 <_vfiprintf_r+0x1bc>
 8002402:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002404:	07d9      	lsls	r1, r3, #31
 8002406:	d405      	bmi.n	8002414 <_vfiprintf_r+0x220>
 8002408:	89ab      	ldrh	r3, [r5, #12]
 800240a:	059a      	lsls	r2, r3, #22
 800240c:	d402      	bmi.n	8002414 <_vfiprintf_r+0x220>
 800240e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002410:	f7ff fe31 	bl	8002076 <__retarget_lock_release_recursive>
 8002414:	89ab      	ldrh	r3, [r5, #12]
 8002416:	065b      	lsls	r3, r3, #25
 8002418:	f53f af12 	bmi.w	8002240 <_vfiprintf_r+0x4c>
 800241c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800241e:	e711      	b.n	8002244 <_vfiprintf_r+0x50>
 8002420:	ab03      	add	r3, sp, #12
 8002422:	9300      	str	r3, [sp, #0]
 8002424:	462a      	mov	r2, r5
 8002426:	4b09      	ldr	r3, [pc, #36]	; (800244c <_vfiprintf_r+0x258>)
 8002428:	a904      	add	r1, sp, #16
 800242a:	4630      	mov	r0, r6
 800242c:	f000 f880 	bl	8002530 <_printf_i>
 8002430:	e7e4      	b.n	80023fc <_vfiprintf_r+0x208>
 8002432:	bf00      	nop
 8002434:	08002dc0 	.word	0x08002dc0
 8002438:	08002de0 	.word	0x08002de0
 800243c:	08002da0 	.word	0x08002da0
 8002440:	08002e00 	.word	0x08002e00
 8002444:	08002e0a 	.word	0x08002e0a
 8002448:	00000000 	.word	0x00000000
 800244c:	080021cf 	.word	0x080021cf
 8002450:	08002e06 	.word	0x08002e06

08002454 <_printf_common>:
 8002454:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002458:	4616      	mov	r6, r2
 800245a:	4699      	mov	r9, r3
 800245c:	688a      	ldr	r2, [r1, #8]
 800245e:	690b      	ldr	r3, [r1, #16]
 8002460:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002464:	4293      	cmp	r3, r2
 8002466:	bfb8      	it	lt
 8002468:	4613      	movlt	r3, r2
 800246a:	6033      	str	r3, [r6, #0]
 800246c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002470:	4607      	mov	r7, r0
 8002472:	460c      	mov	r4, r1
 8002474:	b10a      	cbz	r2, 800247a <_printf_common+0x26>
 8002476:	3301      	adds	r3, #1
 8002478:	6033      	str	r3, [r6, #0]
 800247a:	6823      	ldr	r3, [r4, #0]
 800247c:	0699      	lsls	r1, r3, #26
 800247e:	bf42      	ittt	mi
 8002480:	6833      	ldrmi	r3, [r6, #0]
 8002482:	3302      	addmi	r3, #2
 8002484:	6033      	strmi	r3, [r6, #0]
 8002486:	6825      	ldr	r5, [r4, #0]
 8002488:	f015 0506 	ands.w	r5, r5, #6
 800248c:	d106      	bne.n	800249c <_printf_common+0x48>
 800248e:	f104 0a19 	add.w	sl, r4, #25
 8002492:	68e3      	ldr	r3, [r4, #12]
 8002494:	6832      	ldr	r2, [r6, #0]
 8002496:	1a9b      	subs	r3, r3, r2
 8002498:	42ab      	cmp	r3, r5
 800249a:	dc26      	bgt.n	80024ea <_printf_common+0x96>
 800249c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80024a0:	1e13      	subs	r3, r2, #0
 80024a2:	6822      	ldr	r2, [r4, #0]
 80024a4:	bf18      	it	ne
 80024a6:	2301      	movne	r3, #1
 80024a8:	0692      	lsls	r2, r2, #26
 80024aa:	d42b      	bmi.n	8002504 <_printf_common+0xb0>
 80024ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80024b0:	4649      	mov	r1, r9
 80024b2:	4638      	mov	r0, r7
 80024b4:	47c0      	blx	r8
 80024b6:	3001      	adds	r0, #1
 80024b8:	d01e      	beq.n	80024f8 <_printf_common+0xa4>
 80024ba:	6823      	ldr	r3, [r4, #0]
 80024bc:	68e5      	ldr	r5, [r4, #12]
 80024be:	6832      	ldr	r2, [r6, #0]
 80024c0:	f003 0306 	and.w	r3, r3, #6
 80024c4:	2b04      	cmp	r3, #4
 80024c6:	bf08      	it	eq
 80024c8:	1aad      	subeq	r5, r5, r2
 80024ca:	68a3      	ldr	r3, [r4, #8]
 80024cc:	6922      	ldr	r2, [r4, #16]
 80024ce:	bf0c      	ite	eq
 80024d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80024d4:	2500      	movne	r5, #0
 80024d6:	4293      	cmp	r3, r2
 80024d8:	bfc4      	itt	gt
 80024da:	1a9b      	subgt	r3, r3, r2
 80024dc:	18ed      	addgt	r5, r5, r3
 80024de:	2600      	movs	r6, #0
 80024e0:	341a      	adds	r4, #26
 80024e2:	42b5      	cmp	r5, r6
 80024e4:	d11a      	bne.n	800251c <_printf_common+0xc8>
 80024e6:	2000      	movs	r0, #0
 80024e8:	e008      	b.n	80024fc <_printf_common+0xa8>
 80024ea:	2301      	movs	r3, #1
 80024ec:	4652      	mov	r2, sl
 80024ee:	4649      	mov	r1, r9
 80024f0:	4638      	mov	r0, r7
 80024f2:	47c0      	blx	r8
 80024f4:	3001      	adds	r0, #1
 80024f6:	d103      	bne.n	8002500 <_printf_common+0xac>
 80024f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80024fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002500:	3501      	adds	r5, #1
 8002502:	e7c6      	b.n	8002492 <_printf_common+0x3e>
 8002504:	18e1      	adds	r1, r4, r3
 8002506:	1c5a      	adds	r2, r3, #1
 8002508:	2030      	movs	r0, #48	; 0x30
 800250a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800250e:	4422      	add	r2, r4
 8002510:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002514:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002518:	3302      	adds	r3, #2
 800251a:	e7c7      	b.n	80024ac <_printf_common+0x58>
 800251c:	2301      	movs	r3, #1
 800251e:	4622      	mov	r2, r4
 8002520:	4649      	mov	r1, r9
 8002522:	4638      	mov	r0, r7
 8002524:	47c0      	blx	r8
 8002526:	3001      	adds	r0, #1
 8002528:	d0e6      	beq.n	80024f8 <_printf_common+0xa4>
 800252a:	3601      	adds	r6, #1
 800252c:	e7d9      	b.n	80024e2 <_printf_common+0x8e>
	...

08002530 <_printf_i>:
 8002530:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002534:	7e0f      	ldrb	r7, [r1, #24]
 8002536:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002538:	2f78      	cmp	r7, #120	; 0x78
 800253a:	4691      	mov	r9, r2
 800253c:	4680      	mov	r8, r0
 800253e:	460c      	mov	r4, r1
 8002540:	469a      	mov	sl, r3
 8002542:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002546:	d807      	bhi.n	8002558 <_printf_i+0x28>
 8002548:	2f62      	cmp	r7, #98	; 0x62
 800254a:	d80a      	bhi.n	8002562 <_printf_i+0x32>
 800254c:	2f00      	cmp	r7, #0
 800254e:	f000 80d8 	beq.w	8002702 <_printf_i+0x1d2>
 8002552:	2f58      	cmp	r7, #88	; 0x58
 8002554:	f000 80a3 	beq.w	800269e <_printf_i+0x16e>
 8002558:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800255c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002560:	e03a      	b.n	80025d8 <_printf_i+0xa8>
 8002562:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002566:	2b15      	cmp	r3, #21
 8002568:	d8f6      	bhi.n	8002558 <_printf_i+0x28>
 800256a:	a101      	add	r1, pc, #4	; (adr r1, 8002570 <_printf_i+0x40>)
 800256c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002570:	080025c9 	.word	0x080025c9
 8002574:	080025dd 	.word	0x080025dd
 8002578:	08002559 	.word	0x08002559
 800257c:	08002559 	.word	0x08002559
 8002580:	08002559 	.word	0x08002559
 8002584:	08002559 	.word	0x08002559
 8002588:	080025dd 	.word	0x080025dd
 800258c:	08002559 	.word	0x08002559
 8002590:	08002559 	.word	0x08002559
 8002594:	08002559 	.word	0x08002559
 8002598:	08002559 	.word	0x08002559
 800259c:	080026e9 	.word	0x080026e9
 80025a0:	0800260d 	.word	0x0800260d
 80025a4:	080026cb 	.word	0x080026cb
 80025a8:	08002559 	.word	0x08002559
 80025ac:	08002559 	.word	0x08002559
 80025b0:	0800270b 	.word	0x0800270b
 80025b4:	08002559 	.word	0x08002559
 80025b8:	0800260d 	.word	0x0800260d
 80025bc:	08002559 	.word	0x08002559
 80025c0:	08002559 	.word	0x08002559
 80025c4:	080026d3 	.word	0x080026d3
 80025c8:	682b      	ldr	r3, [r5, #0]
 80025ca:	1d1a      	adds	r2, r3, #4
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	602a      	str	r2, [r5, #0]
 80025d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80025d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80025d8:	2301      	movs	r3, #1
 80025da:	e0a3      	b.n	8002724 <_printf_i+0x1f4>
 80025dc:	6820      	ldr	r0, [r4, #0]
 80025de:	6829      	ldr	r1, [r5, #0]
 80025e0:	0606      	lsls	r6, r0, #24
 80025e2:	f101 0304 	add.w	r3, r1, #4
 80025e6:	d50a      	bpl.n	80025fe <_printf_i+0xce>
 80025e8:	680e      	ldr	r6, [r1, #0]
 80025ea:	602b      	str	r3, [r5, #0]
 80025ec:	2e00      	cmp	r6, #0
 80025ee:	da03      	bge.n	80025f8 <_printf_i+0xc8>
 80025f0:	232d      	movs	r3, #45	; 0x2d
 80025f2:	4276      	negs	r6, r6
 80025f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80025f8:	485e      	ldr	r0, [pc, #376]	; (8002774 <_printf_i+0x244>)
 80025fa:	230a      	movs	r3, #10
 80025fc:	e019      	b.n	8002632 <_printf_i+0x102>
 80025fe:	680e      	ldr	r6, [r1, #0]
 8002600:	602b      	str	r3, [r5, #0]
 8002602:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002606:	bf18      	it	ne
 8002608:	b236      	sxthne	r6, r6
 800260a:	e7ef      	b.n	80025ec <_printf_i+0xbc>
 800260c:	682b      	ldr	r3, [r5, #0]
 800260e:	6820      	ldr	r0, [r4, #0]
 8002610:	1d19      	adds	r1, r3, #4
 8002612:	6029      	str	r1, [r5, #0]
 8002614:	0601      	lsls	r1, r0, #24
 8002616:	d501      	bpl.n	800261c <_printf_i+0xec>
 8002618:	681e      	ldr	r6, [r3, #0]
 800261a:	e002      	b.n	8002622 <_printf_i+0xf2>
 800261c:	0646      	lsls	r6, r0, #25
 800261e:	d5fb      	bpl.n	8002618 <_printf_i+0xe8>
 8002620:	881e      	ldrh	r6, [r3, #0]
 8002622:	4854      	ldr	r0, [pc, #336]	; (8002774 <_printf_i+0x244>)
 8002624:	2f6f      	cmp	r7, #111	; 0x6f
 8002626:	bf0c      	ite	eq
 8002628:	2308      	moveq	r3, #8
 800262a:	230a      	movne	r3, #10
 800262c:	2100      	movs	r1, #0
 800262e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002632:	6865      	ldr	r5, [r4, #4]
 8002634:	60a5      	str	r5, [r4, #8]
 8002636:	2d00      	cmp	r5, #0
 8002638:	bfa2      	ittt	ge
 800263a:	6821      	ldrge	r1, [r4, #0]
 800263c:	f021 0104 	bicge.w	r1, r1, #4
 8002640:	6021      	strge	r1, [r4, #0]
 8002642:	b90e      	cbnz	r6, 8002648 <_printf_i+0x118>
 8002644:	2d00      	cmp	r5, #0
 8002646:	d04d      	beq.n	80026e4 <_printf_i+0x1b4>
 8002648:	4615      	mov	r5, r2
 800264a:	fbb6 f1f3 	udiv	r1, r6, r3
 800264e:	fb03 6711 	mls	r7, r3, r1, r6
 8002652:	5dc7      	ldrb	r7, [r0, r7]
 8002654:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002658:	4637      	mov	r7, r6
 800265a:	42bb      	cmp	r3, r7
 800265c:	460e      	mov	r6, r1
 800265e:	d9f4      	bls.n	800264a <_printf_i+0x11a>
 8002660:	2b08      	cmp	r3, #8
 8002662:	d10b      	bne.n	800267c <_printf_i+0x14c>
 8002664:	6823      	ldr	r3, [r4, #0]
 8002666:	07de      	lsls	r6, r3, #31
 8002668:	d508      	bpl.n	800267c <_printf_i+0x14c>
 800266a:	6923      	ldr	r3, [r4, #16]
 800266c:	6861      	ldr	r1, [r4, #4]
 800266e:	4299      	cmp	r1, r3
 8002670:	bfde      	ittt	le
 8002672:	2330      	movle	r3, #48	; 0x30
 8002674:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002678:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800267c:	1b52      	subs	r2, r2, r5
 800267e:	6122      	str	r2, [r4, #16]
 8002680:	f8cd a000 	str.w	sl, [sp]
 8002684:	464b      	mov	r3, r9
 8002686:	aa03      	add	r2, sp, #12
 8002688:	4621      	mov	r1, r4
 800268a:	4640      	mov	r0, r8
 800268c:	f7ff fee2 	bl	8002454 <_printf_common>
 8002690:	3001      	adds	r0, #1
 8002692:	d14c      	bne.n	800272e <_printf_i+0x1fe>
 8002694:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002698:	b004      	add	sp, #16
 800269a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800269e:	4835      	ldr	r0, [pc, #212]	; (8002774 <_printf_i+0x244>)
 80026a0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80026a4:	6829      	ldr	r1, [r5, #0]
 80026a6:	6823      	ldr	r3, [r4, #0]
 80026a8:	f851 6b04 	ldr.w	r6, [r1], #4
 80026ac:	6029      	str	r1, [r5, #0]
 80026ae:	061d      	lsls	r5, r3, #24
 80026b0:	d514      	bpl.n	80026dc <_printf_i+0x1ac>
 80026b2:	07df      	lsls	r7, r3, #31
 80026b4:	bf44      	itt	mi
 80026b6:	f043 0320 	orrmi.w	r3, r3, #32
 80026ba:	6023      	strmi	r3, [r4, #0]
 80026bc:	b91e      	cbnz	r6, 80026c6 <_printf_i+0x196>
 80026be:	6823      	ldr	r3, [r4, #0]
 80026c0:	f023 0320 	bic.w	r3, r3, #32
 80026c4:	6023      	str	r3, [r4, #0]
 80026c6:	2310      	movs	r3, #16
 80026c8:	e7b0      	b.n	800262c <_printf_i+0xfc>
 80026ca:	6823      	ldr	r3, [r4, #0]
 80026cc:	f043 0320 	orr.w	r3, r3, #32
 80026d0:	6023      	str	r3, [r4, #0]
 80026d2:	2378      	movs	r3, #120	; 0x78
 80026d4:	4828      	ldr	r0, [pc, #160]	; (8002778 <_printf_i+0x248>)
 80026d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80026da:	e7e3      	b.n	80026a4 <_printf_i+0x174>
 80026dc:	0659      	lsls	r1, r3, #25
 80026de:	bf48      	it	mi
 80026e0:	b2b6      	uxthmi	r6, r6
 80026e2:	e7e6      	b.n	80026b2 <_printf_i+0x182>
 80026e4:	4615      	mov	r5, r2
 80026e6:	e7bb      	b.n	8002660 <_printf_i+0x130>
 80026e8:	682b      	ldr	r3, [r5, #0]
 80026ea:	6826      	ldr	r6, [r4, #0]
 80026ec:	6961      	ldr	r1, [r4, #20]
 80026ee:	1d18      	adds	r0, r3, #4
 80026f0:	6028      	str	r0, [r5, #0]
 80026f2:	0635      	lsls	r5, r6, #24
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	d501      	bpl.n	80026fc <_printf_i+0x1cc>
 80026f8:	6019      	str	r1, [r3, #0]
 80026fa:	e002      	b.n	8002702 <_printf_i+0x1d2>
 80026fc:	0670      	lsls	r0, r6, #25
 80026fe:	d5fb      	bpl.n	80026f8 <_printf_i+0x1c8>
 8002700:	8019      	strh	r1, [r3, #0]
 8002702:	2300      	movs	r3, #0
 8002704:	6123      	str	r3, [r4, #16]
 8002706:	4615      	mov	r5, r2
 8002708:	e7ba      	b.n	8002680 <_printf_i+0x150>
 800270a:	682b      	ldr	r3, [r5, #0]
 800270c:	1d1a      	adds	r2, r3, #4
 800270e:	602a      	str	r2, [r5, #0]
 8002710:	681d      	ldr	r5, [r3, #0]
 8002712:	6862      	ldr	r2, [r4, #4]
 8002714:	2100      	movs	r1, #0
 8002716:	4628      	mov	r0, r5
 8002718:	f7fd fd7a 	bl	8000210 <memchr>
 800271c:	b108      	cbz	r0, 8002722 <_printf_i+0x1f2>
 800271e:	1b40      	subs	r0, r0, r5
 8002720:	6060      	str	r0, [r4, #4]
 8002722:	6863      	ldr	r3, [r4, #4]
 8002724:	6123      	str	r3, [r4, #16]
 8002726:	2300      	movs	r3, #0
 8002728:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800272c:	e7a8      	b.n	8002680 <_printf_i+0x150>
 800272e:	6923      	ldr	r3, [r4, #16]
 8002730:	462a      	mov	r2, r5
 8002732:	4649      	mov	r1, r9
 8002734:	4640      	mov	r0, r8
 8002736:	47d0      	blx	sl
 8002738:	3001      	adds	r0, #1
 800273a:	d0ab      	beq.n	8002694 <_printf_i+0x164>
 800273c:	6823      	ldr	r3, [r4, #0]
 800273e:	079b      	lsls	r3, r3, #30
 8002740:	d413      	bmi.n	800276a <_printf_i+0x23a>
 8002742:	68e0      	ldr	r0, [r4, #12]
 8002744:	9b03      	ldr	r3, [sp, #12]
 8002746:	4298      	cmp	r0, r3
 8002748:	bfb8      	it	lt
 800274a:	4618      	movlt	r0, r3
 800274c:	e7a4      	b.n	8002698 <_printf_i+0x168>
 800274e:	2301      	movs	r3, #1
 8002750:	4632      	mov	r2, r6
 8002752:	4649      	mov	r1, r9
 8002754:	4640      	mov	r0, r8
 8002756:	47d0      	blx	sl
 8002758:	3001      	adds	r0, #1
 800275a:	d09b      	beq.n	8002694 <_printf_i+0x164>
 800275c:	3501      	adds	r5, #1
 800275e:	68e3      	ldr	r3, [r4, #12]
 8002760:	9903      	ldr	r1, [sp, #12]
 8002762:	1a5b      	subs	r3, r3, r1
 8002764:	42ab      	cmp	r3, r5
 8002766:	dcf2      	bgt.n	800274e <_printf_i+0x21e>
 8002768:	e7eb      	b.n	8002742 <_printf_i+0x212>
 800276a:	2500      	movs	r5, #0
 800276c:	f104 0619 	add.w	r6, r4, #25
 8002770:	e7f5      	b.n	800275e <_printf_i+0x22e>
 8002772:	bf00      	nop
 8002774:	08002e11 	.word	0x08002e11
 8002778:	08002e22 	.word	0x08002e22

0800277c <_sbrk_r>:
 800277c:	b538      	push	{r3, r4, r5, lr}
 800277e:	4d06      	ldr	r5, [pc, #24]	; (8002798 <_sbrk_r+0x1c>)
 8002780:	2300      	movs	r3, #0
 8002782:	4604      	mov	r4, r0
 8002784:	4608      	mov	r0, r1
 8002786:	602b      	str	r3, [r5, #0]
 8002788:	f7fe f824 	bl	80007d4 <_sbrk>
 800278c:	1c43      	adds	r3, r0, #1
 800278e:	d102      	bne.n	8002796 <_sbrk_r+0x1a>
 8002790:	682b      	ldr	r3, [r5, #0]
 8002792:	b103      	cbz	r3, 8002796 <_sbrk_r+0x1a>
 8002794:	6023      	str	r3, [r4, #0]
 8002796:	bd38      	pop	{r3, r4, r5, pc}
 8002798:	20000130 	.word	0x20000130

0800279c <__sread>:
 800279c:	b510      	push	{r4, lr}
 800279e:	460c      	mov	r4, r1
 80027a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80027a4:	f000 fab2 	bl	8002d0c <_read_r>
 80027a8:	2800      	cmp	r0, #0
 80027aa:	bfab      	itete	ge
 80027ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80027ae:	89a3      	ldrhlt	r3, [r4, #12]
 80027b0:	181b      	addge	r3, r3, r0
 80027b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80027b6:	bfac      	ite	ge
 80027b8:	6563      	strge	r3, [r4, #84]	; 0x54
 80027ba:	81a3      	strhlt	r3, [r4, #12]
 80027bc:	bd10      	pop	{r4, pc}

080027be <__swrite>:
 80027be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80027c2:	461f      	mov	r7, r3
 80027c4:	898b      	ldrh	r3, [r1, #12]
 80027c6:	05db      	lsls	r3, r3, #23
 80027c8:	4605      	mov	r5, r0
 80027ca:	460c      	mov	r4, r1
 80027cc:	4616      	mov	r6, r2
 80027ce:	d505      	bpl.n	80027dc <__swrite+0x1e>
 80027d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80027d4:	2302      	movs	r3, #2
 80027d6:	2200      	movs	r2, #0
 80027d8:	f000 f9c8 	bl	8002b6c <_lseek_r>
 80027dc:	89a3      	ldrh	r3, [r4, #12]
 80027de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80027e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80027e6:	81a3      	strh	r3, [r4, #12]
 80027e8:	4632      	mov	r2, r6
 80027ea:	463b      	mov	r3, r7
 80027ec:	4628      	mov	r0, r5
 80027ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80027f2:	f000 b869 	b.w	80028c8 <_write_r>

080027f6 <__sseek>:
 80027f6:	b510      	push	{r4, lr}
 80027f8:	460c      	mov	r4, r1
 80027fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80027fe:	f000 f9b5 	bl	8002b6c <_lseek_r>
 8002802:	1c43      	adds	r3, r0, #1
 8002804:	89a3      	ldrh	r3, [r4, #12]
 8002806:	bf15      	itete	ne
 8002808:	6560      	strne	r0, [r4, #84]	; 0x54
 800280a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800280e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002812:	81a3      	strheq	r3, [r4, #12]
 8002814:	bf18      	it	ne
 8002816:	81a3      	strhne	r3, [r4, #12]
 8002818:	bd10      	pop	{r4, pc}

0800281a <__sclose>:
 800281a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800281e:	f000 b8d3 	b.w	80029c8 <_close_r>
	...

08002824 <__swbuf_r>:
 8002824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002826:	460e      	mov	r6, r1
 8002828:	4614      	mov	r4, r2
 800282a:	4605      	mov	r5, r0
 800282c:	b118      	cbz	r0, 8002836 <__swbuf_r+0x12>
 800282e:	6983      	ldr	r3, [r0, #24]
 8002830:	b90b      	cbnz	r3, 8002836 <__swbuf_r+0x12>
 8002832:	f7ff fb81 	bl	8001f38 <__sinit>
 8002836:	4b21      	ldr	r3, [pc, #132]	; (80028bc <__swbuf_r+0x98>)
 8002838:	429c      	cmp	r4, r3
 800283a:	d12b      	bne.n	8002894 <__swbuf_r+0x70>
 800283c:	686c      	ldr	r4, [r5, #4]
 800283e:	69a3      	ldr	r3, [r4, #24]
 8002840:	60a3      	str	r3, [r4, #8]
 8002842:	89a3      	ldrh	r3, [r4, #12]
 8002844:	071a      	lsls	r2, r3, #28
 8002846:	d52f      	bpl.n	80028a8 <__swbuf_r+0x84>
 8002848:	6923      	ldr	r3, [r4, #16]
 800284a:	b36b      	cbz	r3, 80028a8 <__swbuf_r+0x84>
 800284c:	6923      	ldr	r3, [r4, #16]
 800284e:	6820      	ldr	r0, [r4, #0]
 8002850:	1ac0      	subs	r0, r0, r3
 8002852:	6963      	ldr	r3, [r4, #20]
 8002854:	b2f6      	uxtb	r6, r6
 8002856:	4283      	cmp	r3, r0
 8002858:	4637      	mov	r7, r6
 800285a:	dc04      	bgt.n	8002866 <__swbuf_r+0x42>
 800285c:	4621      	mov	r1, r4
 800285e:	4628      	mov	r0, r5
 8002860:	f000 f948 	bl	8002af4 <_fflush_r>
 8002864:	bb30      	cbnz	r0, 80028b4 <__swbuf_r+0x90>
 8002866:	68a3      	ldr	r3, [r4, #8]
 8002868:	3b01      	subs	r3, #1
 800286a:	60a3      	str	r3, [r4, #8]
 800286c:	6823      	ldr	r3, [r4, #0]
 800286e:	1c5a      	adds	r2, r3, #1
 8002870:	6022      	str	r2, [r4, #0]
 8002872:	701e      	strb	r6, [r3, #0]
 8002874:	6963      	ldr	r3, [r4, #20]
 8002876:	3001      	adds	r0, #1
 8002878:	4283      	cmp	r3, r0
 800287a:	d004      	beq.n	8002886 <__swbuf_r+0x62>
 800287c:	89a3      	ldrh	r3, [r4, #12]
 800287e:	07db      	lsls	r3, r3, #31
 8002880:	d506      	bpl.n	8002890 <__swbuf_r+0x6c>
 8002882:	2e0a      	cmp	r6, #10
 8002884:	d104      	bne.n	8002890 <__swbuf_r+0x6c>
 8002886:	4621      	mov	r1, r4
 8002888:	4628      	mov	r0, r5
 800288a:	f000 f933 	bl	8002af4 <_fflush_r>
 800288e:	b988      	cbnz	r0, 80028b4 <__swbuf_r+0x90>
 8002890:	4638      	mov	r0, r7
 8002892:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002894:	4b0a      	ldr	r3, [pc, #40]	; (80028c0 <__swbuf_r+0x9c>)
 8002896:	429c      	cmp	r4, r3
 8002898:	d101      	bne.n	800289e <__swbuf_r+0x7a>
 800289a:	68ac      	ldr	r4, [r5, #8]
 800289c:	e7cf      	b.n	800283e <__swbuf_r+0x1a>
 800289e:	4b09      	ldr	r3, [pc, #36]	; (80028c4 <__swbuf_r+0xa0>)
 80028a0:	429c      	cmp	r4, r3
 80028a2:	bf08      	it	eq
 80028a4:	68ec      	ldreq	r4, [r5, #12]
 80028a6:	e7ca      	b.n	800283e <__swbuf_r+0x1a>
 80028a8:	4621      	mov	r1, r4
 80028aa:	4628      	mov	r0, r5
 80028ac:	f000 f81e 	bl	80028ec <__swsetup_r>
 80028b0:	2800      	cmp	r0, #0
 80028b2:	d0cb      	beq.n	800284c <__swbuf_r+0x28>
 80028b4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80028b8:	e7ea      	b.n	8002890 <__swbuf_r+0x6c>
 80028ba:	bf00      	nop
 80028bc:	08002dc0 	.word	0x08002dc0
 80028c0:	08002de0 	.word	0x08002de0
 80028c4:	08002da0 	.word	0x08002da0

080028c8 <_write_r>:
 80028c8:	b538      	push	{r3, r4, r5, lr}
 80028ca:	4d07      	ldr	r5, [pc, #28]	; (80028e8 <_write_r+0x20>)
 80028cc:	4604      	mov	r4, r0
 80028ce:	4608      	mov	r0, r1
 80028d0:	4611      	mov	r1, r2
 80028d2:	2200      	movs	r2, #0
 80028d4:	602a      	str	r2, [r5, #0]
 80028d6:	461a      	mov	r2, r3
 80028d8:	f7fd ff2b 	bl	8000732 <_write>
 80028dc:	1c43      	adds	r3, r0, #1
 80028de:	d102      	bne.n	80028e6 <_write_r+0x1e>
 80028e0:	682b      	ldr	r3, [r5, #0]
 80028e2:	b103      	cbz	r3, 80028e6 <_write_r+0x1e>
 80028e4:	6023      	str	r3, [r4, #0]
 80028e6:	bd38      	pop	{r3, r4, r5, pc}
 80028e8:	20000130 	.word	0x20000130

080028ec <__swsetup_r>:
 80028ec:	4b32      	ldr	r3, [pc, #200]	; (80029b8 <__swsetup_r+0xcc>)
 80028ee:	b570      	push	{r4, r5, r6, lr}
 80028f0:	681d      	ldr	r5, [r3, #0]
 80028f2:	4606      	mov	r6, r0
 80028f4:	460c      	mov	r4, r1
 80028f6:	b125      	cbz	r5, 8002902 <__swsetup_r+0x16>
 80028f8:	69ab      	ldr	r3, [r5, #24]
 80028fa:	b913      	cbnz	r3, 8002902 <__swsetup_r+0x16>
 80028fc:	4628      	mov	r0, r5
 80028fe:	f7ff fb1b 	bl	8001f38 <__sinit>
 8002902:	4b2e      	ldr	r3, [pc, #184]	; (80029bc <__swsetup_r+0xd0>)
 8002904:	429c      	cmp	r4, r3
 8002906:	d10f      	bne.n	8002928 <__swsetup_r+0x3c>
 8002908:	686c      	ldr	r4, [r5, #4]
 800290a:	89a3      	ldrh	r3, [r4, #12]
 800290c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002910:	0719      	lsls	r1, r3, #28
 8002912:	d42c      	bmi.n	800296e <__swsetup_r+0x82>
 8002914:	06dd      	lsls	r5, r3, #27
 8002916:	d411      	bmi.n	800293c <__swsetup_r+0x50>
 8002918:	2309      	movs	r3, #9
 800291a:	6033      	str	r3, [r6, #0]
 800291c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002920:	81a3      	strh	r3, [r4, #12]
 8002922:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002926:	e03e      	b.n	80029a6 <__swsetup_r+0xba>
 8002928:	4b25      	ldr	r3, [pc, #148]	; (80029c0 <__swsetup_r+0xd4>)
 800292a:	429c      	cmp	r4, r3
 800292c:	d101      	bne.n	8002932 <__swsetup_r+0x46>
 800292e:	68ac      	ldr	r4, [r5, #8]
 8002930:	e7eb      	b.n	800290a <__swsetup_r+0x1e>
 8002932:	4b24      	ldr	r3, [pc, #144]	; (80029c4 <__swsetup_r+0xd8>)
 8002934:	429c      	cmp	r4, r3
 8002936:	bf08      	it	eq
 8002938:	68ec      	ldreq	r4, [r5, #12]
 800293a:	e7e6      	b.n	800290a <__swsetup_r+0x1e>
 800293c:	0758      	lsls	r0, r3, #29
 800293e:	d512      	bpl.n	8002966 <__swsetup_r+0x7a>
 8002940:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002942:	b141      	cbz	r1, 8002956 <__swsetup_r+0x6a>
 8002944:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002948:	4299      	cmp	r1, r3
 800294a:	d002      	beq.n	8002952 <__swsetup_r+0x66>
 800294c:	4630      	mov	r0, r6
 800294e:	f000 f991 	bl	8002c74 <_free_r>
 8002952:	2300      	movs	r3, #0
 8002954:	6363      	str	r3, [r4, #52]	; 0x34
 8002956:	89a3      	ldrh	r3, [r4, #12]
 8002958:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800295c:	81a3      	strh	r3, [r4, #12]
 800295e:	2300      	movs	r3, #0
 8002960:	6063      	str	r3, [r4, #4]
 8002962:	6923      	ldr	r3, [r4, #16]
 8002964:	6023      	str	r3, [r4, #0]
 8002966:	89a3      	ldrh	r3, [r4, #12]
 8002968:	f043 0308 	orr.w	r3, r3, #8
 800296c:	81a3      	strh	r3, [r4, #12]
 800296e:	6923      	ldr	r3, [r4, #16]
 8002970:	b94b      	cbnz	r3, 8002986 <__swsetup_r+0x9a>
 8002972:	89a3      	ldrh	r3, [r4, #12]
 8002974:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002978:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800297c:	d003      	beq.n	8002986 <__swsetup_r+0x9a>
 800297e:	4621      	mov	r1, r4
 8002980:	4630      	mov	r0, r6
 8002982:	f000 f92b 	bl	8002bdc <__smakebuf_r>
 8002986:	89a0      	ldrh	r0, [r4, #12]
 8002988:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800298c:	f010 0301 	ands.w	r3, r0, #1
 8002990:	d00a      	beq.n	80029a8 <__swsetup_r+0xbc>
 8002992:	2300      	movs	r3, #0
 8002994:	60a3      	str	r3, [r4, #8]
 8002996:	6963      	ldr	r3, [r4, #20]
 8002998:	425b      	negs	r3, r3
 800299a:	61a3      	str	r3, [r4, #24]
 800299c:	6923      	ldr	r3, [r4, #16]
 800299e:	b943      	cbnz	r3, 80029b2 <__swsetup_r+0xc6>
 80029a0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80029a4:	d1ba      	bne.n	800291c <__swsetup_r+0x30>
 80029a6:	bd70      	pop	{r4, r5, r6, pc}
 80029a8:	0781      	lsls	r1, r0, #30
 80029aa:	bf58      	it	pl
 80029ac:	6963      	ldrpl	r3, [r4, #20]
 80029ae:	60a3      	str	r3, [r4, #8]
 80029b0:	e7f4      	b.n	800299c <__swsetup_r+0xb0>
 80029b2:	2000      	movs	r0, #0
 80029b4:	e7f7      	b.n	80029a6 <__swsetup_r+0xba>
 80029b6:	bf00      	nop
 80029b8:	2000000c 	.word	0x2000000c
 80029bc:	08002dc0 	.word	0x08002dc0
 80029c0:	08002de0 	.word	0x08002de0
 80029c4:	08002da0 	.word	0x08002da0

080029c8 <_close_r>:
 80029c8:	b538      	push	{r3, r4, r5, lr}
 80029ca:	4d06      	ldr	r5, [pc, #24]	; (80029e4 <_close_r+0x1c>)
 80029cc:	2300      	movs	r3, #0
 80029ce:	4604      	mov	r4, r0
 80029d0:	4608      	mov	r0, r1
 80029d2:	602b      	str	r3, [r5, #0]
 80029d4:	f7fd fec9 	bl	800076a <_close>
 80029d8:	1c43      	adds	r3, r0, #1
 80029da:	d102      	bne.n	80029e2 <_close_r+0x1a>
 80029dc:	682b      	ldr	r3, [r5, #0]
 80029de:	b103      	cbz	r3, 80029e2 <_close_r+0x1a>
 80029e0:	6023      	str	r3, [r4, #0]
 80029e2:	bd38      	pop	{r3, r4, r5, pc}
 80029e4:	20000130 	.word	0x20000130

080029e8 <__sflush_r>:
 80029e8:	898a      	ldrh	r2, [r1, #12]
 80029ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80029ee:	4605      	mov	r5, r0
 80029f0:	0710      	lsls	r0, r2, #28
 80029f2:	460c      	mov	r4, r1
 80029f4:	d458      	bmi.n	8002aa8 <__sflush_r+0xc0>
 80029f6:	684b      	ldr	r3, [r1, #4]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	dc05      	bgt.n	8002a08 <__sflush_r+0x20>
 80029fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	dc02      	bgt.n	8002a08 <__sflush_r+0x20>
 8002a02:	2000      	movs	r0, #0
 8002a04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002a08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002a0a:	2e00      	cmp	r6, #0
 8002a0c:	d0f9      	beq.n	8002a02 <__sflush_r+0x1a>
 8002a0e:	2300      	movs	r3, #0
 8002a10:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002a14:	682f      	ldr	r7, [r5, #0]
 8002a16:	602b      	str	r3, [r5, #0]
 8002a18:	d032      	beq.n	8002a80 <__sflush_r+0x98>
 8002a1a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002a1c:	89a3      	ldrh	r3, [r4, #12]
 8002a1e:	075a      	lsls	r2, r3, #29
 8002a20:	d505      	bpl.n	8002a2e <__sflush_r+0x46>
 8002a22:	6863      	ldr	r3, [r4, #4]
 8002a24:	1ac0      	subs	r0, r0, r3
 8002a26:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002a28:	b10b      	cbz	r3, 8002a2e <__sflush_r+0x46>
 8002a2a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002a2c:	1ac0      	subs	r0, r0, r3
 8002a2e:	2300      	movs	r3, #0
 8002a30:	4602      	mov	r2, r0
 8002a32:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002a34:	6a21      	ldr	r1, [r4, #32]
 8002a36:	4628      	mov	r0, r5
 8002a38:	47b0      	blx	r6
 8002a3a:	1c43      	adds	r3, r0, #1
 8002a3c:	89a3      	ldrh	r3, [r4, #12]
 8002a3e:	d106      	bne.n	8002a4e <__sflush_r+0x66>
 8002a40:	6829      	ldr	r1, [r5, #0]
 8002a42:	291d      	cmp	r1, #29
 8002a44:	d82c      	bhi.n	8002aa0 <__sflush_r+0xb8>
 8002a46:	4a2a      	ldr	r2, [pc, #168]	; (8002af0 <__sflush_r+0x108>)
 8002a48:	40ca      	lsrs	r2, r1
 8002a4a:	07d6      	lsls	r6, r2, #31
 8002a4c:	d528      	bpl.n	8002aa0 <__sflush_r+0xb8>
 8002a4e:	2200      	movs	r2, #0
 8002a50:	6062      	str	r2, [r4, #4]
 8002a52:	04d9      	lsls	r1, r3, #19
 8002a54:	6922      	ldr	r2, [r4, #16]
 8002a56:	6022      	str	r2, [r4, #0]
 8002a58:	d504      	bpl.n	8002a64 <__sflush_r+0x7c>
 8002a5a:	1c42      	adds	r2, r0, #1
 8002a5c:	d101      	bne.n	8002a62 <__sflush_r+0x7a>
 8002a5e:	682b      	ldr	r3, [r5, #0]
 8002a60:	b903      	cbnz	r3, 8002a64 <__sflush_r+0x7c>
 8002a62:	6560      	str	r0, [r4, #84]	; 0x54
 8002a64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002a66:	602f      	str	r7, [r5, #0]
 8002a68:	2900      	cmp	r1, #0
 8002a6a:	d0ca      	beq.n	8002a02 <__sflush_r+0x1a>
 8002a6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002a70:	4299      	cmp	r1, r3
 8002a72:	d002      	beq.n	8002a7a <__sflush_r+0x92>
 8002a74:	4628      	mov	r0, r5
 8002a76:	f000 f8fd 	bl	8002c74 <_free_r>
 8002a7a:	2000      	movs	r0, #0
 8002a7c:	6360      	str	r0, [r4, #52]	; 0x34
 8002a7e:	e7c1      	b.n	8002a04 <__sflush_r+0x1c>
 8002a80:	6a21      	ldr	r1, [r4, #32]
 8002a82:	2301      	movs	r3, #1
 8002a84:	4628      	mov	r0, r5
 8002a86:	47b0      	blx	r6
 8002a88:	1c41      	adds	r1, r0, #1
 8002a8a:	d1c7      	bne.n	8002a1c <__sflush_r+0x34>
 8002a8c:	682b      	ldr	r3, [r5, #0]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d0c4      	beq.n	8002a1c <__sflush_r+0x34>
 8002a92:	2b1d      	cmp	r3, #29
 8002a94:	d001      	beq.n	8002a9a <__sflush_r+0xb2>
 8002a96:	2b16      	cmp	r3, #22
 8002a98:	d101      	bne.n	8002a9e <__sflush_r+0xb6>
 8002a9a:	602f      	str	r7, [r5, #0]
 8002a9c:	e7b1      	b.n	8002a02 <__sflush_r+0x1a>
 8002a9e:	89a3      	ldrh	r3, [r4, #12]
 8002aa0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002aa4:	81a3      	strh	r3, [r4, #12]
 8002aa6:	e7ad      	b.n	8002a04 <__sflush_r+0x1c>
 8002aa8:	690f      	ldr	r7, [r1, #16]
 8002aaa:	2f00      	cmp	r7, #0
 8002aac:	d0a9      	beq.n	8002a02 <__sflush_r+0x1a>
 8002aae:	0793      	lsls	r3, r2, #30
 8002ab0:	680e      	ldr	r6, [r1, #0]
 8002ab2:	bf08      	it	eq
 8002ab4:	694b      	ldreq	r3, [r1, #20]
 8002ab6:	600f      	str	r7, [r1, #0]
 8002ab8:	bf18      	it	ne
 8002aba:	2300      	movne	r3, #0
 8002abc:	eba6 0807 	sub.w	r8, r6, r7
 8002ac0:	608b      	str	r3, [r1, #8]
 8002ac2:	f1b8 0f00 	cmp.w	r8, #0
 8002ac6:	dd9c      	ble.n	8002a02 <__sflush_r+0x1a>
 8002ac8:	6a21      	ldr	r1, [r4, #32]
 8002aca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002acc:	4643      	mov	r3, r8
 8002ace:	463a      	mov	r2, r7
 8002ad0:	4628      	mov	r0, r5
 8002ad2:	47b0      	blx	r6
 8002ad4:	2800      	cmp	r0, #0
 8002ad6:	dc06      	bgt.n	8002ae6 <__sflush_r+0xfe>
 8002ad8:	89a3      	ldrh	r3, [r4, #12]
 8002ada:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ade:	81a3      	strh	r3, [r4, #12]
 8002ae0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ae4:	e78e      	b.n	8002a04 <__sflush_r+0x1c>
 8002ae6:	4407      	add	r7, r0
 8002ae8:	eba8 0800 	sub.w	r8, r8, r0
 8002aec:	e7e9      	b.n	8002ac2 <__sflush_r+0xda>
 8002aee:	bf00      	nop
 8002af0:	20400001 	.word	0x20400001

08002af4 <_fflush_r>:
 8002af4:	b538      	push	{r3, r4, r5, lr}
 8002af6:	690b      	ldr	r3, [r1, #16]
 8002af8:	4605      	mov	r5, r0
 8002afa:	460c      	mov	r4, r1
 8002afc:	b913      	cbnz	r3, 8002b04 <_fflush_r+0x10>
 8002afe:	2500      	movs	r5, #0
 8002b00:	4628      	mov	r0, r5
 8002b02:	bd38      	pop	{r3, r4, r5, pc}
 8002b04:	b118      	cbz	r0, 8002b0e <_fflush_r+0x1a>
 8002b06:	6983      	ldr	r3, [r0, #24]
 8002b08:	b90b      	cbnz	r3, 8002b0e <_fflush_r+0x1a>
 8002b0a:	f7ff fa15 	bl	8001f38 <__sinit>
 8002b0e:	4b14      	ldr	r3, [pc, #80]	; (8002b60 <_fflush_r+0x6c>)
 8002b10:	429c      	cmp	r4, r3
 8002b12:	d11b      	bne.n	8002b4c <_fflush_r+0x58>
 8002b14:	686c      	ldr	r4, [r5, #4]
 8002b16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d0ef      	beq.n	8002afe <_fflush_r+0xa>
 8002b1e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002b20:	07d0      	lsls	r0, r2, #31
 8002b22:	d404      	bmi.n	8002b2e <_fflush_r+0x3a>
 8002b24:	0599      	lsls	r1, r3, #22
 8002b26:	d402      	bmi.n	8002b2e <_fflush_r+0x3a>
 8002b28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002b2a:	f7ff faa3 	bl	8002074 <__retarget_lock_acquire_recursive>
 8002b2e:	4628      	mov	r0, r5
 8002b30:	4621      	mov	r1, r4
 8002b32:	f7ff ff59 	bl	80029e8 <__sflush_r>
 8002b36:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002b38:	07da      	lsls	r2, r3, #31
 8002b3a:	4605      	mov	r5, r0
 8002b3c:	d4e0      	bmi.n	8002b00 <_fflush_r+0xc>
 8002b3e:	89a3      	ldrh	r3, [r4, #12]
 8002b40:	059b      	lsls	r3, r3, #22
 8002b42:	d4dd      	bmi.n	8002b00 <_fflush_r+0xc>
 8002b44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002b46:	f7ff fa96 	bl	8002076 <__retarget_lock_release_recursive>
 8002b4a:	e7d9      	b.n	8002b00 <_fflush_r+0xc>
 8002b4c:	4b05      	ldr	r3, [pc, #20]	; (8002b64 <_fflush_r+0x70>)
 8002b4e:	429c      	cmp	r4, r3
 8002b50:	d101      	bne.n	8002b56 <_fflush_r+0x62>
 8002b52:	68ac      	ldr	r4, [r5, #8]
 8002b54:	e7df      	b.n	8002b16 <_fflush_r+0x22>
 8002b56:	4b04      	ldr	r3, [pc, #16]	; (8002b68 <_fflush_r+0x74>)
 8002b58:	429c      	cmp	r4, r3
 8002b5a:	bf08      	it	eq
 8002b5c:	68ec      	ldreq	r4, [r5, #12]
 8002b5e:	e7da      	b.n	8002b16 <_fflush_r+0x22>
 8002b60:	08002dc0 	.word	0x08002dc0
 8002b64:	08002de0 	.word	0x08002de0
 8002b68:	08002da0 	.word	0x08002da0

08002b6c <_lseek_r>:
 8002b6c:	b538      	push	{r3, r4, r5, lr}
 8002b6e:	4d07      	ldr	r5, [pc, #28]	; (8002b8c <_lseek_r+0x20>)
 8002b70:	4604      	mov	r4, r0
 8002b72:	4608      	mov	r0, r1
 8002b74:	4611      	mov	r1, r2
 8002b76:	2200      	movs	r2, #0
 8002b78:	602a      	str	r2, [r5, #0]
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	f7fd fe1c 	bl	80007b8 <_lseek>
 8002b80:	1c43      	adds	r3, r0, #1
 8002b82:	d102      	bne.n	8002b8a <_lseek_r+0x1e>
 8002b84:	682b      	ldr	r3, [r5, #0]
 8002b86:	b103      	cbz	r3, 8002b8a <_lseek_r+0x1e>
 8002b88:	6023      	str	r3, [r4, #0]
 8002b8a:	bd38      	pop	{r3, r4, r5, pc}
 8002b8c:	20000130 	.word	0x20000130

08002b90 <__swhatbuf_r>:
 8002b90:	b570      	push	{r4, r5, r6, lr}
 8002b92:	460e      	mov	r6, r1
 8002b94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b98:	2900      	cmp	r1, #0
 8002b9a:	b096      	sub	sp, #88	; 0x58
 8002b9c:	4614      	mov	r4, r2
 8002b9e:	461d      	mov	r5, r3
 8002ba0:	da08      	bge.n	8002bb4 <__swhatbuf_r+0x24>
 8002ba2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	602a      	str	r2, [r5, #0]
 8002baa:	061a      	lsls	r2, r3, #24
 8002bac:	d410      	bmi.n	8002bd0 <__swhatbuf_r+0x40>
 8002bae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bb2:	e00e      	b.n	8002bd2 <__swhatbuf_r+0x42>
 8002bb4:	466a      	mov	r2, sp
 8002bb6:	f000 f8bb 	bl	8002d30 <_fstat_r>
 8002bba:	2800      	cmp	r0, #0
 8002bbc:	dbf1      	blt.n	8002ba2 <__swhatbuf_r+0x12>
 8002bbe:	9a01      	ldr	r2, [sp, #4]
 8002bc0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002bc4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002bc8:	425a      	negs	r2, r3
 8002bca:	415a      	adcs	r2, r3
 8002bcc:	602a      	str	r2, [r5, #0]
 8002bce:	e7ee      	b.n	8002bae <__swhatbuf_r+0x1e>
 8002bd0:	2340      	movs	r3, #64	; 0x40
 8002bd2:	2000      	movs	r0, #0
 8002bd4:	6023      	str	r3, [r4, #0]
 8002bd6:	b016      	add	sp, #88	; 0x58
 8002bd8:	bd70      	pop	{r4, r5, r6, pc}
	...

08002bdc <__smakebuf_r>:
 8002bdc:	898b      	ldrh	r3, [r1, #12]
 8002bde:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002be0:	079d      	lsls	r5, r3, #30
 8002be2:	4606      	mov	r6, r0
 8002be4:	460c      	mov	r4, r1
 8002be6:	d507      	bpl.n	8002bf8 <__smakebuf_r+0x1c>
 8002be8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002bec:	6023      	str	r3, [r4, #0]
 8002bee:	6123      	str	r3, [r4, #16]
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	6163      	str	r3, [r4, #20]
 8002bf4:	b002      	add	sp, #8
 8002bf6:	bd70      	pop	{r4, r5, r6, pc}
 8002bf8:	ab01      	add	r3, sp, #4
 8002bfa:	466a      	mov	r2, sp
 8002bfc:	f7ff ffc8 	bl	8002b90 <__swhatbuf_r>
 8002c00:	9900      	ldr	r1, [sp, #0]
 8002c02:	4605      	mov	r5, r0
 8002c04:	4630      	mov	r0, r6
 8002c06:	f7ff fa57 	bl	80020b8 <_malloc_r>
 8002c0a:	b948      	cbnz	r0, 8002c20 <__smakebuf_r+0x44>
 8002c0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002c10:	059a      	lsls	r2, r3, #22
 8002c12:	d4ef      	bmi.n	8002bf4 <__smakebuf_r+0x18>
 8002c14:	f023 0303 	bic.w	r3, r3, #3
 8002c18:	f043 0302 	orr.w	r3, r3, #2
 8002c1c:	81a3      	strh	r3, [r4, #12]
 8002c1e:	e7e3      	b.n	8002be8 <__smakebuf_r+0xc>
 8002c20:	4b0d      	ldr	r3, [pc, #52]	; (8002c58 <__smakebuf_r+0x7c>)
 8002c22:	62b3      	str	r3, [r6, #40]	; 0x28
 8002c24:	89a3      	ldrh	r3, [r4, #12]
 8002c26:	6020      	str	r0, [r4, #0]
 8002c28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c2c:	81a3      	strh	r3, [r4, #12]
 8002c2e:	9b00      	ldr	r3, [sp, #0]
 8002c30:	6163      	str	r3, [r4, #20]
 8002c32:	9b01      	ldr	r3, [sp, #4]
 8002c34:	6120      	str	r0, [r4, #16]
 8002c36:	b15b      	cbz	r3, 8002c50 <__smakebuf_r+0x74>
 8002c38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002c3c:	4630      	mov	r0, r6
 8002c3e:	f000 f889 	bl	8002d54 <_isatty_r>
 8002c42:	b128      	cbz	r0, 8002c50 <__smakebuf_r+0x74>
 8002c44:	89a3      	ldrh	r3, [r4, #12]
 8002c46:	f023 0303 	bic.w	r3, r3, #3
 8002c4a:	f043 0301 	orr.w	r3, r3, #1
 8002c4e:	81a3      	strh	r3, [r4, #12]
 8002c50:	89a0      	ldrh	r0, [r4, #12]
 8002c52:	4305      	orrs	r5, r0
 8002c54:	81a5      	strh	r5, [r4, #12]
 8002c56:	e7cd      	b.n	8002bf4 <__smakebuf_r+0x18>
 8002c58:	08001ed1 	.word	0x08001ed1

08002c5c <__malloc_lock>:
 8002c5c:	4801      	ldr	r0, [pc, #4]	; (8002c64 <__malloc_lock+0x8>)
 8002c5e:	f7ff ba09 	b.w	8002074 <__retarget_lock_acquire_recursive>
 8002c62:	bf00      	nop
 8002c64:	20000124 	.word	0x20000124

08002c68 <__malloc_unlock>:
 8002c68:	4801      	ldr	r0, [pc, #4]	; (8002c70 <__malloc_unlock+0x8>)
 8002c6a:	f7ff ba04 	b.w	8002076 <__retarget_lock_release_recursive>
 8002c6e:	bf00      	nop
 8002c70:	20000124 	.word	0x20000124

08002c74 <_free_r>:
 8002c74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002c76:	2900      	cmp	r1, #0
 8002c78:	d044      	beq.n	8002d04 <_free_r+0x90>
 8002c7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002c7e:	9001      	str	r0, [sp, #4]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	f1a1 0404 	sub.w	r4, r1, #4
 8002c86:	bfb8      	it	lt
 8002c88:	18e4      	addlt	r4, r4, r3
 8002c8a:	f7ff ffe7 	bl	8002c5c <__malloc_lock>
 8002c8e:	4a1e      	ldr	r2, [pc, #120]	; (8002d08 <_free_r+0x94>)
 8002c90:	9801      	ldr	r0, [sp, #4]
 8002c92:	6813      	ldr	r3, [r2, #0]
 8002c94:	b933      	cbnz	r3, 8002ca4 <_free_r+0x30>
 8002c96:	6063      	str	r3, [r4, #4]
 8002c98:	6014      	str	r4, [r2, #0]
 8002c9a:	b003      	add	sp, #12
 8002c9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002ca0:	f7ff bfe2 	b.w	8002c68 <__malloc_unlock>
 8002ca4:	42a3      	cmp	r3, r4
 8002ca6:	d908      	bls.n	8002cba <_free_r+0x46>
 8002ca8:	6825      	ldr	r5, [r4, #0]
 8002caa:	1961      	adds	r1, r4, r5
 8002cac:	428b      	cmp	r3, r1
 8002cae:	bf01      	itttt	eq
 8002cb0:	6819      	ldreq	r1, [r3, #0]
 8002cb2:	685b      	ldreq	r3, [r3, #4]
 8002cb4:	1949      	addeq	r1, r1, r5
 8002cb6:	6021      	streq	r1, [r4, #0]
 8002cb8:	e7ed      	b.n	8002c96 <_free_r+0x22>
 8002cba:	461a      	mov	r2, r3
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	b10b      	cbz	r3, 8002cc4 <_free_r+0x50>
 8002cc0:	42a3      	cmp	r3, r4
 8002cc2:	d9fa      	bls.n	8002cba <_free_r+0x46>
 8002cc4:	6811      	ldr	r1, [r2, #0]
 8002cc6:	1855      	adds	r5, r2, r1
 8002cc8:	42a5      	cmp	r5, r4
 8002cca:	d10b      	bne.n	8002ce4 <_free_r+0x70>
 8002ccc:	6824      	ldr	r4, [r4, #0]
 8002cce:	4421      	add	r1, r4
 8002cd0:	1854      	adds	r4, r2, r1
 8002cd2:	42a3      	cmp	r3, r4
 8002cd4:	6011      	str	r1, [r2, #0]
 8002cd6:	d1e0      	bne.n	8002c9a <_free_r+0x26>
 8002cd8:	681c      	ldr	r4, [r3, #0]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	6053      	str	r3, [r2, #4]
 8002cde:	4421      	add	r1, r4
 8002ce0:	6011      	str	r1, [r2, #0]
 8002ce2:	e7da      	b.n	8002c9a <_free_r+0x26>
 8002ce4:	d902      	bls.n	8002cec <_free_r+0x78>
 8002ce6:	230c      	movs	r3, #12
 8002ce8:	6003      	str	r3, [r0, #0]
 8002cea:	e7d6      	b.n	8002c9a <_free_r+0x26>
 8002cec:	6825      	ldr	r5, [r4, #0]
 8002cee:	1961      	adds	r1, r4, r5
 8002cf0:	428b      	cmp	r3, r1
 8002cf2:	bf04      	itt	eq
 8002cf4:	6819      	ldreq	r1, [r3, #0]
 8002cf6:	685b      	ldreq	r3, [r3, #4]
 8002cf8:	6063      	str	r3, [r4, #4]
 8002cfa:	bf04      	itt	eq
 8002cfc:	1949      	addeq	r1, r1, r5
 8002cfe:	6021      	streq	r1, [r4, #0]
 8002d00:	6054      	str	r4, [r2, #4]
 8002d02:	e7ca      	b.n	8002c9a <_free_r+0x26>
 8002d04:	b003      	add	sp, #12
 8002d06:	bd30      	pop	{r4, r5, pc}
 8002d08:	20000128 	.word	0x20000128

08002d0c <_read_r>:
 8002d0c:	b538      	push	{r3, r4, r5, lr}
 8002d0e:	4d07      	ldr	r5, [pc, #28]	; (8002d2c <_read_r+0x20>)
 8002d10:	4604      	mov	r4, r0
 8002d12:	4608      	mov	r0, r1
 8002d14:	4611      	mov	r1, r2
 8002d16:	2200      	movs	r2, #0
 8002d18:	602a      	str	r2, [r5, #0]
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	f7fd fcec 	bl	80006f8 <_read>
 8002d20:	1c43      	adds	r3, r0, #1
 8002d22:	d102      	bne.n	8002d2a <_read_r+0x1e>
 8002d24:	682b      	ldr	r3, [r5, #0]
 8002d26:	b103      	cbz	r3, 8002d2a <_read_r+0x1e>
 8002d28:	6023      	str	r3, [r4, #0]
 8002d2a:	bd38      	pop	{r3, r4, r5, pc}
 8002d2c:	20000130 	.word	0x20000130

08002d30 <_fstat_r>:
 8002d30:	b538      	push	{r3, r4, r5, lr}
 8002d32:	4d07      	ldr	r5, [pc, #28]	; (8002d50 <_fstat_r+0x20>)
 8002d34:	2300      	movs	r3, #0
 8002d36:	4604      	mov	r4, r0
 8002d38:	4608      	mov	r0, r1
 8002d3a:	4611      	mov	r1, r2
 8002d3c:	602b      	str	r3, [r5, #0]
 8002d3e:	f7fd fd20 	bl	8000782 <_fstat>
 8002d42:	1c43      	adds	r3, r0, #1
 8002d44:	d102      	bne.n	8002d4c <_fstat_r+0x1c>
 8002d46:	682b      	ldr	r3, [r5, #0]
 8002d48:	b103      	cbz	r3, 8002d4c <_fstat_r+0x1c>
 8002d4a:	6023      	str	r3, [r4, #0]
 8002d4c:	bd38      	pop	{r3, r4, r5, pc}
 8002d4e:	bf00      	nop
 8002d50:	20000130 	.word	0x20000130

08002d54 <_isatty_r>:
 8002d54:	b538      	push	{r3, r4, r5, lr}
 8002d56:	4d06      	ldr	r5, [pc, #24]	; (8002d70 <_isatty_r+0x1c>)
 8002d58:	2300      	movs	r3, #0
 8002d5a:	4604      	mov	r4, r0
 8002d5c:	4608      	mov	r0, r1
 8002d5e:	602b      	str	r3, [r5, #0]
 8002d60:	f7fd fd1f 	bl	80007a2 <_isatty>
 8002d64:	1c43      	adds	r3, r0, #1
 8002d66:	d102      	bne.n	8002d6e <_isatty_r+0x1a>
 8002d68:	682b      	ldr	r3, [r5, #0]
 8002d6a:	b103      	cbz	r3, 8002d6e <_isatty_r+0x1a>
 8002d6c:	6023      	str	r3, [r4, #0]
 8002d6e:	bd38      	pop	{r3, r4, r5, pc}
 8002d70:	20000130 	.word	0x20000130

08002d74 <_init>:
 8002d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d76:	bf00      	nop
 8002d78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d7a:	bc08      	pop	{r3}
 8002d7c:	469e      	mov	lr, r3
 8002d7e:	4770      	bx	lr

08002d80 <_fini>:
 8002d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d82:	bf00      	nop
 8002d84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d86:	bc08      	pop	{r3}
 8002d88:	469e      	mov	lr, r3
 8002d8a:	4770      	bx	lr
